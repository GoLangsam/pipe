// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.

package pipe

import (
	"github.com/cheekybits/genny/generic"
)

// anyThing is the generic type flowing thru the pipe network.
type anyThing generic.Type

// ===========================================================================
// Beg of anyThingMake creators

// anyThingMakeChan returns a new open channel
// (simply a 'chan anyThing' that is).
//
// Note: No 'anyThing-producer' is launched here yet! (as is in all the other functions).
//  This is useful to easily create corresponding variables such as:
//
// 	var myanyThingPipelineStartsHere := anyThingMakeChan()
// 	// ... lot's of code to design and build Your favourite "myanyThingWorkflowPipeline"
// 	// ...
// 	// ... *before* You start pouring data into it, e.g. simply via:
// 	for drop := range water {
// 	    myanyThingPipelineStartsHere <- drop
// 	}
// 	close(myanyThingPipelineStartsHere)
//
// Hint: especially helpful, if Your piping library operates on some hidden (non-exported) type
// (or on a type imported from elsewhere - and You don't want/need or should(!) have to care.)
//
// Note: as always (except for anyThingPipeBuffer) the channel is unbuffered.
//
func anyThingMakeChan() (out chan anyThing) {
	return make(chan anyThing)
}

// End of anyThingMake creators
// ===========================================================================

// ===========================================================================
// Beg of anyThingChan producers

// anyThingChan returns a channel to receive
// all inputs
// before close.
func anyThingChan(inp ...anyThing) (out <-chan anyThing) {
	cha := make(chan anyThing)
	go func(out chan<- anyThing, inp ...anyThing) {
		defer close(out)
		for i := range inp {
			out <- inp[i]
		}
	}(cha, inp)
	return cha
}

// anyThingChanSlice returns a channel to receive
// all inputs
// before close.
func anyThingChanSlice(inp ...[]anyThing) (out <-chan anyThing) {
	cha := make(chan anyThing)
	go func(out chan<- anyThing, inp ...[]anyThing) {
		defer close(out)
		for i := range inp {
			for j := range inp[i] {
				out <- inp[i][j]
			}
		}
	}(cha, inp...)
	return cha
}

// anyThingChanFuncNok returns a channel to receive
// all results of generator `gen`
// until `!ok`
// before close.
func anyThingChanFuncNok(gen func() (anyThing, bool)) (out <-chan anyThing) {
	cha := make(chan anyThing)
	go func(out chan<- anyThing, gen func() (anyThing, bool)) {
		defer close(out)
		for {
			res, ok := gen() // generate
			if !ok {
				return
			}
			out <- res
		}
	}(cha, gen)
	return cha
}

// anyThingChanFuncErr returns a channel to receive
// all results of generator `gen`
// until `err != nil`
// before close.
func anyThingChanFuncErr(gen func() (anyThing, error)) (out <-chan anyThing) {
	cha := make(chan anyThing)
	go func(out chan<- anyThing, gen func() (anyThing, error)) {
		defer close(out)
		for {
			res, err := gen() // generate
			if err != nil {
				return
			}
			out <- res
		}
	}(cha, gen)
	return cha
}

// End of anyThingChan producers
// ===========================================================================

// ===========================================================================
// Beg of anyThingPipe functions

// anyThingPipe
// will apply every `op` to every `inp` and
// returns a channel to receive
// each `inp`
// before close.
//
// Note: For functional people,
// this 'could' be named `anyThingMap`.
// Just: 'map' has a very different meaning in go lang.
func anyThingPipe(inp <-chan anyThing, ops ...func(a anyThing)) (out <-chan anyThing) {
	cha := make(chan anyThing)
	go func(out chan<- anyThing, inp <-chan anyThing, ops ...func(a anyThing)) {
		defer close(out)
		for i := range inp {
			for _, op := range ops {
				if op != nil {
					op(i) // chain action
				}
			}
			out <- i // send it
		}
	}(cha, inp, ops...)
	return cha
}

// anyThingPipeFunc
// will chain every `act` to every `inp` and
// returns a channel to receive
// each result
// before close.
func anyThingPipeFunc(inp <-chan anyThing, acts ...func(a anyThing) anyThing) (out <-chan anyThing) {
	cha := make(chan anyThing)
	go func(out chan<- anyThing, inp <-chan anyThing, acts ...func(a anyThing) anyThing) {
		defer close(out)
		for i := range inp {
			for _, act := range acts {
				if act != nil {
					i = act(i) // chain action
				}
			}
			out <- i // send result
		}
	}(cha, inp, acts...)
	return cha
}

// End of anyThingPipe functions
// ===========================================================================

// ===========================================================================
// Beg of anyThingTube closures around anyThingPipe

// anyThingTube returns a closure around PipeanyThing (_, ops...).
func anyThingTube(ops ...func(a anyThing)) (tube func(inp <-chan anyThing) (out <-chan anyThing)) {

	return func(inp <-chan anyThing) (out <-chan anyThing) {
		return anyThingPipe(inp, ops...)
	}
}

// anyThingTubeFunc returns a closure around PipeanyThingFunc (_, acts...).
func anyThingTubeFunc(acts ...func(a anyThing) anyThing) (tube func(inp <-chan anyThing) (out <-chan anyThing)) {

	return func(inp <-chan anyThing) (out <-chan anyThing) {
		return anyThingPipeFunc(inp, acts...)
	}
}

// End of anyThingTube closures around anyThingPipe
// ===========================================================================

// ===========================================================================
// Beg of anyThingDone terminators

// anyThingDone
// will apply every `op` to every `inp` and
// returns a channel to receive
// one signal
// upon close.
func anyThingDone(inp <-chan anyThing, ops ...func(a anyThing)) (done <-chan struct{}) {
	sig := make(chan struct{})
	go func(done chan<- struct{}, inp <-chan anyThing, ops ...func(a anyThing)) {
		defer close(done)
		for i := range inp {
			for _, op := range ops {
				if op != nil {
					op(i) // apply operation
				}
			}
		}
		done <- struct{}{}
	}(sig, inp, ops...)
	return sig
}

// anyThingDoneFunc
// will chain every `act` to every `inp` and
// returns a channel to receive
// one signal
// upon close.
func anyThingDoneFunc(inp <-chan anyThing, acts ...func(a anyThing) anyThing) (done <-chan struct{}) {
	sig := make(chan struct{})
	go func(done chan<- struct{}, inp <-chan anyThing, acts ...func(a anyThing) anyThing) {
		defer close(done)
		for i := range inp {
			for _, act := range acts {
				if act != nil {
					i = act(i) // chain action
				}
			}
		}
		done <- struct{}{}
	}(sig, inp, acts...)
	return sig
}

// anyThingDoneSlice returns a channel to receive
// a slice with every anyThing received on `inp`
// upon close.
//
//  Note: Unlike anyThingDone, anyThingDoneSlice sends the fully accumulated slice, not just an event, once upon close of inp.
func anyThingDoneSlice(inp <-chan anyThing) (done <-chan []anyThing) {
	sig := make(chan []anyThing)
	go func(done chan<- []anyThing, inp <-chan anyThing) {
		defer close(done)
		slice := []anyThing{}
		for i := range inp {
			slice = append(slice, i)
		}
		done <- slice
	}(sig, inp)
	return sig
}

// End of anyThingDone terminators
// ===========================================================================

// ===========================================================================
// Beg of anyThingFini closures

// anyThingFini returns a closure around `anyThingDone(_, ops...)`.
func anyThingFini(ops ...func(a anyThing)) func(inp <-chan anyThing) (done <-chan struct{}) {

	return func(inp <-chan anyThing) (done <-chan struct{}) {
		return anyThingDone(inp, ops...)
	}
}

// anyThingFiniFunc returns a closure around `anyThingDoneFunc(_, acts...)`.
func anyThingFiniFunc(acts ...func(a anyThing) anyThing) func(inp <-chan anyThing) (done <-chan struct{}) {

	return func(inp <-chan anyThing) (done <-chan struct{}) {
		return anyThingDoneFunc(inp, acts...)
	}
}

// anyThingFiniSlice returns a closure around `anyThingDoneSlice(_)`.
func anyThingFiniSlice() func(inp <-chan anyThing) (done <-chan []anyThing) {

	return func(inp <-chan anyThing) (done <-chan []anyThing) {
		return anyThingDoneSlice(inp)
	}
}

// End of anyThingFini closures
// ===========================================================================

// ===========================================================================
// Beg of anyThingPair functions

// anyThingPair returns a pair of channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func anyThingPair(inp <-chan anyThing) (out1, out2 <-chan anyThing) {
	cha1 := make(chan anyThing)
	cha2 := make(chan anyThing)
	go func(out1, out2 chan<- anyThing) {
		defer close(out1)
		defer close(out2)
		for i := range inp {
			out1 <- i
			out2 <- i
		}
	}(cha1, cha2)
	return cha1, cha2
}

// End of anyThingPair functions
// ===========================================================================

// ===========================================================================
// Beg of anyThingFork functions

// anyThingFork returns two channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func anyThingFork(inp <-chan anyThing) (out1, out2 <-chan anyThing) {
	cha1 := make(chan anyThing)
	cha2 := make(chan anyThing)
	go func(out1, out2 chan<- anyThing) {
		defer close(out1)
		defer close(out2)
		for i := range inp {
			out1 <- i
			out2 <- i
		}
	}(cha1, cha2)
	return cha1, cha2
}

// End of anyThingFork functions
// ===========================================================================

// ===========================================================================

// anyThingFanIn2 as seen in Go Concurrency Patterns.
//
// Warning: For instruction and teaching only!
// Do not use in any serious project, as
// it hangs forever upon close of both inputs.
// Thus: it leaks it's goroutine!
// (And never closes it's output)
func anyThingFanIn2(inp, inp2 <-chan anyThing) (out <-chan anyThing) {
	cha := make(chan anyThing)
	go func(out chan<- anyThing, inp, inp2 <-chan anyThing) {
		for {
			select {
			case e := <-inp:
				out <- e
			case e := <-inp2:
				out <- e
			}
		}
	}(cha, inp, inp2)
	return cha
}

// ===========================================================================
