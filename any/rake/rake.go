// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.

package rake

import (
	"container/ring"
	"sync"
	"time"

	"github.com/cheekybits/genny/generic"
)

// Any is the generic type flowing thru the pipe network.
type Any generic.Type

type item = Any

// Rake represents a fanned out circular pipe network
// with a flexibly adjusting buffer.
// Any item is processed once only -
// items seen before are filtered out.
//
// A Rake may be used e.g. as a crawling Crawler
// where every link shall be visited only once.
type Rake struct {
	items chan item       // to be processed
	wg    *sync.WaitGroup // monitor SiteEnter & SiteLeave
	done  chan struct{}   // to signal termination due to traffic having subsided
	once  *sync.Once      // to close Done only once - lauched from first feed
}

// New returns a (pointer to a) new operational Rake.
//
// `rake` is the operation to be executed in parallel on any item
// which has not been seen before.
// Have it use `myrake.Feed(items...)` in order to provide feed-back.
//
// `attr` allows to specify an attribute for the seen filter.
// Pass `nil` to filter on any item itself.
//
// `somany` is the # of parallel processes - the parallelism
// of the network built by Rake,
// the # of parallel raking endpoints of the Rake.
func New(
	rake func(a item),
	attr func(a item) interface{},
	somany int,
) (
	my *Rake,
) {
	if somany < 1 {
		somany = 1
	}
	my = &Rake{
		make(chan item),
		new(sync.WaitGroup),
		make(chan struct{}),
		new(sync.Once),
	}

	proc := func(a item) { // wrap rake:
		rake(a)      // apply original rake
		my.wg.Done() // have this item leave
	}

	// build the concurrent pipe network
	items, seen := my.itemForkSeenAttr(my.itemPipeEnter(my.items, my.wg), attr)
	_ = my.itemDoneLeave(seen, my.wg) // `seen` leave without further processing

	for _, items := range my.itemStrew(my.itemPipeAdjust(items), somany) {
		_ = my.itemDoneFunc(items, proc) // strewed `items` leave in wrapped `crawl`
	}

	return my
}

// Done returns a channel which will be signalled and closed
// when traffic has subsided, nothing is left to be processed
// and consequently all goroutines have terminated.
func (my *Rake) Done() (done <-chan struct{}) {
	return my.done
}

// Feed registers new items on the network.
func (my *Rake) Feed(items ...item) *Rake {

	if len(items) == 0 {
		return my
	}

	for _, i := range items {
		my.items <- i
	}

	my.once.Do(func() {
		go func(t *Rake) {
			my.done <- <-my.itemDoneWait(my.items, my.wg)
			close(my.done)
		}(my)
	})

	return my

}

// End of Rake
// ===========================================================================

// ===========================================================================
// Beg of itemMake creators

// itemMakeChan returns a new open channel
// (simply a 'chan item' that is).
// Note: No 'item-producer' is launched here yet! (as is in all the other functions).
//  This is useful to easily create corresponding variables such as:
/*
var myitemPipelineStartsHere := itemMakeChan()
// ... lot's of code to design and build Your favourite "myitemWorkflowPipeline"
   // ...
   // ... *before* You start pouring data into it, e.g. simply via:
   for drop := range water {
myitemPipelineStartsHere <- drop
   }
close(myitemPipelineStartsHere)
*/
//  Hint: especially helpful, if Your piping library operates on some hidden (non-exported) type
//  (or on a type imported from elsewhere - and You don't want/need or should(!) have to care.)
//
// Note: as always (except for itemPipeBuffer) the channel is unbuffered.
//
func (my *Rake) itemMakeChan() (out chan item) {
	return make(chan item)
}

// End of itemMake creators
// ===========================================================================

// ===========================================================================
// Beg of itemChan producers

// itemChan returns a channel to receive
// all inputs
// before close.
func (my *Rake) itemChan(inp ...item) (out <-chan item) {
	cha := make(chan item)
	go my.chanitem(cha, inp...)
	return cha
}

func (my *Rake) chanitem(out chan<- item, inp ...item) {
	defer close(out)
	for i := range inp {
		out <- inp[i]
	}
}

// itemChanSlice returns a channel to receive
// all inputs
// before close.
func (my *Rake) itemChanSlice(inp ...[]item) (out <-chan item) {
	cha := make(chan item)
	go my.chanitemSlice(cha, inp...)
	return cha
}

func (my *Rake) chanitemSlice(out chan<- item, inp ...[]item) {
	defer close(out)
	for i := range inp {
		for j := range inp[i] {
			out <- inp[i][j]
		}
	}
}

// itemChanFuncNok returns a channel to receive
// all results of generator `gen`
// until `!ok`
// before close.
func (my *Rake) itemChanFuncNok(gen func() (item, bool)) (out <-chan item) {
	cha := make(chan item)
	go my.chanitemFuncNok(cha, gen)
	return cha
}

func (my *Rake) chanitemFuncNok(out chan<- item, gen func() (item, bool)) {
	defer close(out)
	for {
		res, ok := gen() // generate
		if !ok {
			return
		}
		out <- res
	}
}

// itemChanFuncErr returns a channel to receive
// all results of generator `gen`
// until `err != nil`
// before close.
func (my *Rake) itemChanFuncErr(gen func() (item, error)) (out <-chan item) {
	cha := make(chan item)
	go my.chanitemFuncErr(cha, gen)
	return cha
}

func (my *Rake) chanitemFuncErr(out chan<- item, gen func() (item, error)) {
	defer close(out)
	for {
		res, err := gen() // generate
		if err != nil {
			return
		}
		out <- res
	}
}

// End of itemChan producers
// ===========================================================================

// ===========================================================================
// Beg of itemPipe functions

// itemPipeFunc returns a channel to receive
// every result of action `act` applied to `inp`
// before close.
// Note: it 'could' be PipeItemMap for functional people,
// but 'map' has a very different meaning in go lang.
func (my *Rake) itemPipeFunc(inp <-chan item, act func(a item) item) (out <-chan item) {
	cha := make(chan item)
	if act == nil { // Make `nil` value useful
		act = func(a item) item { return a }
	}
	go my.pipeitemFunc(cha, inp, act)
	return cha
}

func (my *Rake) pipeitemFunc(out chan<- item, inp <-chan item, act func(a item) item) {
	defer close(out)
	for i := range inp {
		out <- act(i) // apply action
	}
}

// End of itemPipe functions
// ===========================================================================

// ===========================================================================
// Beg of itemTube closures around itemPipe

// itemTubeFunc returns a closure around PipeItemFunc (_, act).
func (my *Rake) itemTubeFunc(act func(a item) item) (tube func(inp <-chan item) (out <-chan item)) {

	return func(inp <-chan item) (out <-chan item) {
		return my.itemPipeFunc(inp, act)
	}
}

// End of itemTube closures around itemPipe
// ===========================================================================

// ===========================================================================
// Beg of itemDone terminators

// itemDone returns a channel to receive
// one signal before close after `inp` has been drained.
func (my *Rake) itemDone(inp <-chan item) (done <-chan struct{}) {
	sig := make(chan struct{})
	go my.doneitem(sig, inp)
	return sig
}

func (my *Rake) doneitem(done chan<- struct{}, inp <-chan item) {
	defer close(done)
	for i := range inp {
		_ = i // Drain inp
	}
	done <- struct{}{}
}

// itemDoneSlice returns a channel to receive
// a slice with every item received on `inp`
// before close.
//
// Note: Unlike itemDone, DoneItemSlice sends the fully accumulated slice, not just an event, once upon close of inp.
func (my *Rake) itemDoneSlice(inp <-chan item) (done <-chan []item) {
	sig := make(chan []item)
	go my.doneitemSlice(sig, inp)
	return sig
}

func (my *Rake) doneitemSlice(done chan<- []item, inp <-chan item) {
	defer close(done)
	slice := []item{}
	for i := range inp {
		slice = append(slice, i)
	}
	done <- slice
}

// itemDoneFunc returns a channel to receive
// one signal after `act` has been applied to every `inp`
// before close.
func (my *Rake) itemDoneFunc(inp <-chan item, act func(a item)) (done <-chan struct{}) {
	sig := make(chan struct{})
	if act == nil {
		act = func(a item) { return }
	}
	go my.doneitemFunc(sig, inp, act)
	return sig
}

func (my *Rake) doneitemFunc(done chan<- struct{}, inp <-chan item, act func(a item)) {
	defer close(done)
	for i := range inp {
		act(i) // apply action
	}
	done <- struct{}{}
}

// End of itemDone terminators
// ===========================================================================

// ===========================================================================
// Beg of itemFini closures

// itemFini returns a closure around `itemDone(_)`.
func (my *Rake) itemFini() func(inp <-chan item) (done <-chan struct{}) {

	return func(inp <-chan item) (done <-chan struct{}) {
		return my.itemDone(inp)
	}
}

// itemFiniSlice returns a closure around `itemDoneSlice(_)`.
func (my *Rake) itemFiniSlice() func(inp <-chan item) (done <-chan []item) {

	return func(inp <-chan item) (done <-chan []item) {
		return my.itemDoneSlice(inp)
	}
}

// itemFiniFunc returns a closure around `itemDoneFunc(_, act)`.
func (my *Rake) itemFiniFunc(act func(a item)) func(inp <-chan item) (done <-chan struct{}) {

	return func(inp <-chan item) (done <-chan struct{}) {
		return my.itemDoneFunc(inp, act)
	}
}

// End of itemFini closures
// ===========================================================================

// ===========================================================================
// Beg of itemPair functions

// itemPair returns a pair of channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func (my *Rake) itemPair(inp <-chan item) (out1, out2 <-chan item) {
	cha1 := make(chan item)
	cha2 := make(chan item)
	go my.pairitem(cha1, cha2, inp)
	return cha1, cha2
}

/* not used - kept for reference only.
func (my *Rake) pairitem(out1, out2 chan<- item, inp <-chan item) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func (my *Rake) pairitem(out1, out2 chan<- item, inp <-chan item) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of itemPair functions
// ===========================================================================

// ===========================================================================
// Beg of itemFork functions

// itemFork returns two channels
// either of which is to receive
// every result of inp
// before close.
func (my *Rake) itemFork(inp <-chan item) (out1, out2 <-chan item) {
	cha1 := make(chan item)
	cha2 := make(chan item)
	go my.forkitem(cha1, cha2, inp)
	return cha1, cha2
}

/* not used - kept for reference only.
func (my *Rake) forkitem(out1, out2 chan<- item, inp <-chan item) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func (my *Rake) forkitem(out1, out2 chan<- item, inp <-chan item) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of itemFork functions
// ===========================================================================

// ===========================================================================
// Beg of itemFanIn2 simple binary Fan-In

// itemFanIn2 returns a channel to receive all to receive all from both `inp1` and `inp2` before close.
func (my *Rake) itemFanIn2(inp1, inp2 <-chan item) (out <-chan item) {
	cha := make(chan item)
	go my.fanIn2item(cha, inp1, inp2)
	return cha
}

/* not used - kept for reference only.
// (my *Rake) fanin2item as seen in Go Concurrency Patterns
func fanin2item(out chan<- item, inp1, inp2 <-chan item) {
	for {
		select {
		case e := <-inp1:
			out <- e
		case e := <-inp2:
			out <- e
		}
	}
} */

func (my *Rake) fanIn2item(out chan<- item, inp1, inp2 <-chan item) {
	defer close(out)

	var (
		closed bool // we found a chan closed
		ok     bool // did we read successfully?
		e      item // what we've read
	)

	for !closed {
		select {
		case e, ok = <-inp1:
			if ok {
				out <- e
			} else {
				inp1 = inp2   // swap inp2 into inp1
				closed = true // break out of the loop
			}
		case e, ok = <-inp2:
			if ok {
				out <- e
			} else {
				closed = true // break out of the loop				}
			}
		}
	}

	// inp1 might not be closed yet. Drain it.
	for e = range inp1 {
		out <- e
	}
}

// End of itemFanIn2 simple binary Fan-In
// ===========================================================================

// Note: pipeitemAdjust imports "container/ring" for the expanding buffer.

// ===========================================================================
// Beg of itemPipeAdjust

// itemPipeAdjust returns a channel to receive
// all `inp`
// buffered by a itemSendProxy process
// before close.
func (my *Rake) itemPipeAdjust(inp <-chan item, sizes ...int) (out <-chan item) {
	cap, que := my.senditemProxySizes(sizes...)
	cha := make(chan item, cap)
	go my.pipeitemAdjust(cha, inp, que)
	return cha
}

// itemTubeAdjust returns a closure around itemPipeAdjust (_, sizes ...int).
func (my *Rake) itemTubeAdjust(sizes ...int) (tube func(inp <-chan item) (out <-chan item)) {

	return func(inp <-chan item) (out <-chan item) {
		return my.itemPipeAdjust(inp, sizes...)
	}
}

// End of itemPipeAdjust
// ===========================================================================

// ===========================================================================
// Beg of senditemProxy

func (my *Rake) senditemProxySizes(sizes ...int) (cap, que int) {

	// CAP is the minimum capacity of the buffered proxy channel in `itemSendProxy`
	const CAP = 10

	// QUE is the minimum initially allocated size of the circular queue in `itemSendProxy`
	const QUE = 16

	cap = CAP
	que = QUE

	if len(sizes) > 0 && sizes[0] > CAP {
		que = sizes[0]
	}

	if len(sizes) > 1 && sizes[1] > QUE {
		que = sizes[1]
	}

	if len(sizes) > 2 {
		panic("itemSendProxy: too many sizes")
	}

	return
}

// itemSendProxy returns a channel to serve as a sending proxy to 'out'.
// Uses a goroutine to receive values from 'out' and store them
// in an expanding buffer, so that sending to 'out' never blocks.
//  Note: the expanding buffer is implemented via "container/ring"
//
// Note: itemSendProxy is kept for the Sieve example
// and other dynamic use to be discovered
// even so it does not fit the pipe tube pattern as itemPipeAdjust does.
func (my *Rake) itemSendProxy(out chan<- item, sizes ...int) chan<- item {
	cap, que := my.senditemProxySizes(sizes...)
	cha := make(chan item, cap)
	go my.pipeitemAdjust(out, cha, que)
	return cha
}

// pipeitemAdjust uses an adjusting buffer to receive from 'inp'
// even so 'out' is not ready to receive yet. The buffer may grow
// until 'inp' is closed and then will shrink by every send to 'out'.
//  Note: the adjusting buffer is implemented via "container/ring"
func (my *Rake) pipeitemAdjust(out chan<- item, inp <-chan item, QUE int) {
	defer close(out)
	n := QUE // the allocated size of the circular queue
	first := ring.New(n)
	last := first
	var c chan<- item
	var e item
	ok := true
	for ok {
		c = out
		if first == last {
			c = nil // buffer empty: disable output
		} else {
			e = first.Value.(item)
		}
		select {
		case e, ok = <-inp:
			if ok {
				last.Value = e
				if last.Next() == first {
					last.Link(ring.New(n)) // buffer full: expand it
					n *= 2
				}
				last = last.Next()
			}
		case c <- e:
			first = first.Next()
		}
	}

	for first != last {
		out <- first.Value.(item)
		first = first.Unlink(1) // first.Next()
	}
}

// End of senditemProxy
// ===========================================================================

// ===========================================================================
// Beg of itemPipeEnter/Leave - Flapdoors observed by a Waiter

// itemWaiter - as implemented by `*sync.WaitGroup` -
// attends Flapdoors and keeps counting
// who enters and who leaves.
//
// Use itemDoneWait to learn about
// when the facilities are closed.
//
// Note: You may also use Your provided `*sync.WaitGroup.Wait()`
// to know when to close the facilities.
// Just: itemDoneWait is more convenient
// as it also closes the primary channel for You.
//
// Just make sure to have _all_ entrances and exits attended,
// and `Wait()` only *after* You've started flooding the facilities.
type itemWaiter interface {
	Add(delta int)
	Done()
	Wait()
}

// Note: The name is intentionally generic in order to avoid eventual multiple-declaration clashes.

// itemPipeEnter returns a channel to receive
// all `inp`
// and registers throughput
// as arrival
// on the given `sync.WaitGroup`
// until close.
func (my *Rake) itemPipeEnter(inp <-chan item, wg itemWaiter) (out <-chan item) {
	cha := make(chan item)
	go my.pipeitemEnter(cha, wg, inp)
	return cha
}

// itemPipeLeave returns a channel to receive
// all `inp`
// and registers throughput
// as departure
// on the given `sync.WaitGroup`
// until close.
func (my *Rake) itemPipeLeave(inp <-chan item, wg itemWaiter) (out <-chan item) {
	cha := make(chan item)
	go my.pipeitemLeave(cha, wg, inp)
	return cha
}

// itemDoneLeave returns a channel to receive
// one signal after
// all throughput on `inp`
// has been registered
// as departure
// on the given `sync.WaitGroup`
// before close.
func (my *Rake) itemDoneLeave(inp <-chan item, wg itemWaiter) (done <-chan struct{}) {
	sig := make(chan struct{})
	go my.doneitemLeave(sig, wg, inp)
	return sig
}

func (my *Rake) pipeitemEnter(out chan<- item, wg itemWaiter, inp <-chan item) {
	defer close(out)
	for i := range inp {
		wg.Add(1)
		out <- i
	}
}

func (my *Rake) pipeitemLeave(out chan<- item, wg itemWaiter, inp <-chan item) {
	defer close(out)
	for i := range inp {
		out <- i
		wg.Done()
	}
}

func (my *Rake) doneitemLeave(done chan<- struct{}, wg itemWaiter, inp <-chan item) {
	defer close(done)
	for i := range inp {
		_ = i // discard
		wg.Done()
	}
	done <- struct{}{}
}

// itemTubeEnter returns a closure around itemPipeEnter (_, wg)
// registering throughput
// as arrival
// on the given `sync.WaitGroup`.
func (my *Rake) itemTubeEnter(wg itemWaiter) (tube func(inp <-chan item) (out <-chan item)) {

	return func(inp <-chan item) (out <-chan item) {
		return my.itemPipeEnter(inp, wg)
	}
}

// itemTubeLeave returns a closure around itemPipeLeave (_, wg)
// registering throughput
// as departure
// on the given `sync.WaitGroup`.
func (my *Rake) itemTubeLeave(wg itemWaiter) (tube func(inp <-chan item) (out <-chan item)) {

	return func(inp <-chan item) (out <-chan item) {
		return my.itemPipeLeave(inp, wg)
	}
}

// itemFiniLeave returns a closure around `itemDoneLeave(_, wg)`
// registering throughput
// as departure
// on the given `sync.WaitGroup`.
func (my *Rake) itemFiniLeave(wg itemWaiter) func(inp <-chan item) (done <-chan struct{}) {

	return func(inp <-chan item) (done <-chan struct{}) {
		return my.itemDoneLeave(inp, wg)
	}
}

// itemDoneWait returns a channel to receive
// one signal
// after wg.Wait() has returned and inp has been closed
// before close.
//
// Note: Use only *after* You've started flooding the facilities.
func (my *Rake) itemDoneWait(inp chan<- item, wg itemWaiter) (done <-chan struct{}) {
	cha := make(chan struct{})
	go my.doneitemWait(cha, inp, wg)
	return cha
}

func (my *Rake) doneitemWait(done chan<- struct{}, inp chan<- item, wg itemWaiter) {
	defer close(done)
	wg.Wait()
	close(inp)
	done <- struct{}{} // not really needed - but looks better
}

// itemFiniWait returns a closure around `DoneitemWait(_, wg)`.
func (my *Rake) itemFiniWait(wg itemWaiter) func(inp chan<- item) (done <-chan struct{}) {

	return func(inp chan<- item) (done <-chan struct{}) {
		return my.itemDoneWait(inp, wg)
	}
}

// End of itemPipeEnter/Leave - Flapdoors observed by a Waiter
// ===========================================================================

// ===========================================================================
// Beg of itemStrew - scatter them

// itemStrew returns a slice (of size = size) of channels
// one of which shall receive each inp before close.
func (my *Rake) itemStrew(inp <-chan item, size int) (outS [](<-chan item)) {
	chaS := make([]chan item, size)
	for i := 0; i < size; i++ {
		chaS[i] = make(chan item)
	}

	go my.strewitem(inp, chaS...)

	outS = make([]<-chan item, size)
	for i := 0; i < size; i++ {
		outS[i] = chaS[i] // convert `chan` to `<-chan`
	}

	return outS
}

// c strewitem(inp <-chan item, outS ...chan<- item) {
// Note: go does not convert the passed slice `[]chan item` to `[]chan<- item` automatically.
// So, we do neither here, as we are lazy (we just call an internal helper function).
func (my *Rake) strewitem(inp <-chan item, outS ...chan item) {

	for i := range inp {
		for !my.trySenditem(i, outS...) {
			time.Sleep(time.Millisecond * 10) // wait a little before retry
		} // !sent
	} // inp

	for o := range outS {
		close(outS[o])
	}
}

func (my *Rake) trySenditem(inp item, outS ...chan item) bool {

	for o := range outS {

		select { // try to send
		case outS[o] <- inp:
			return true
		default:
			// keep trying
		}

	} // outS
	return false
}

// End of itemStrew - scatter them
// ===========================================================================

// ===========================================================================
// Beg of itemPipeSeen/itemForkSeen - an "I've seen this item before" filter / forker

// itemPipeSeen returns a channel to receive
// all `inp`
// not been seen before
// while silently dropping everything seen before
// (internally growing a `sync.Map` to discriminate)
// until close.
// Note: itemPipeFilterNotSeenYet might be a better name, but is fairly long.
func (my *Rake) itemPipeSeen(inp <-chan item) (out <-chan item) {
	cha := make(chan item)
	go my.pipeitemSeenAttr(cha, inp, nil)
	return cha
}

// itemPipeSeenAttr returns a channel to receive
// all `inp`
// whose attribute `attr` has
// not been seen before
// while silently dropping everything seen before
// (internally growing a `sync.Map` to discriminate)
// until close.
// Note: itemPipeFilterAttrNotSeenYet might be a better name, but is fairly long.
func (my *Rake) itemPipeSeenAttr(inp <-chan item, attr func(a item) interface{}) (out <-chan item) {
	cha := make(chan item)
	go my.pipeitemSeenAttr(cha, inp, attr)
	return cha
}

// itemForkSeen returns two channels, `new` and `old`,
// where `new` is to receive
// all `inp`
// not been seen before
// and `old`
// all `inp`
// seen before
// (internally growing a `sync.Map` to discriminate)
// until close.
func (my *Rake) itemForkSeen(inp <-chan item) (new, old <-chan item) {
	cha1 := make(chan item)
	cha2 := make(chan item)
	go my.forkitemSeenAttr(cha1, cha2, inp, nil)
	return cha1, cha2
}

// itemForkSeenAttr returns two channels, `new` and `old`,
// where `new` is to receive
// all `inp`
// whose attribute `attr` has
// not been seen before
// and `old`
// all `inp`
// seen before
// (internally growing a `sync.Map` to discriminate)
// until close.
func (my *Rake) itemForkSeenAttr(inp <-chan item, attr func(a item) interface{}) (new, old <-chan item) {
	cha1 := make(chan item)
	cha2 := make(chan item)
	go my.forkitemSeenAttr(cha1, cha2, inp, attr)
	return cha1, cha2
}

func (my *Rake) pipeitemSeenAttr(out chan<- item, inp <-chan item, attr func(a item) interface{}) {
	defer close(out)

	if attr == nil { // Make `nil` value useful
		attr = func(a item) interface{} { return a }
	}

	seen := sync.Map{}
	for i := range inp {
		if _, visited := seen.LoadOrStore(attr(i), struct{}{}); visited {
			// drop i silently
		} else {
			out <- i
		}
	}
}

func (my *Rake) forkitemSeenAttr(new, old chan<- item, inp <-chan item, attr func(a item) interface{}) {
	defer close(new)
	defer close(old)

	if attr == nil { // Make `nil` value useful
		attr = func(a item) interface{} { return a }
	}

	seen := sync.Map{}
	for i := range inp {
		if _, visited := seen.LoadOrStore(attr(i), struct{}{}); visited {
			old <- i
		} else {
			new <- i
		}
	}
}

// itemTubeSeen returns a closure around itemPipeSeen()
// (silently dropping every item seen before).
func (my *Rake) itemTubeSeen() (tube func(inp <-chan item) (out <-chan item)) {

	return func(inp <-chan item) (out <-chan item) {
		return my.itemPipeSeen(inp)
	}
}

// itemTubeSeenAttr returns a closure around itemPipeSeenAttr()
// (silently dropping every item
// whose attribute `attr` was
// seen before).
func (my *Rake) itemTubeSeenAttr(attr func(a item) interface{}) (tube func(inp <-chan item) (out <-chan item)) {

	return func(inp <-chan item) (out <-chan item) {
		return my.itemPipeSeenAttr(inp, attr)
	}
}

// End of itemPipeSeen/itemForkSeen - an "I've seen this item before" filter / forker
// ===========================================================================
