// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package rake

import "sync"

// ===========================================================================
// Beg of itemPipeSeen/itemForkSeen - an "I've seen this item before" filter / forker

// itemPipeSeen returns a channel to receive
// all `inp`
// not been seen before
// while silently dropping everything seen before
// (internally growing a `sync.Map` to discriminate)
// until close.
// Note: itemPipeFilterNotSeenYet might be a better name, but is fairly long.
func (my *Rake) itemPipeSeen(inp <-chan item) (out <-chan item) {
	cha := make(chan item)
	go my.pipeitemSeenAttr(cha, inp, nil)
	return cha
}

// itemPipeSeenAttr returns a channel to receive
// all `inp`
// whose attribute `attr` has
// not been seen before
// while silently dropping everything seen before
// (internally growing a `sync.Map` to discriminate)
// until close.
// Note: itemPipeFilterAttrNotSeenYet might be a better name, but is fairly long.
func (my *Rake) itemPipeSeenAttr(inp <-chan item, attr func(a item) interface{}) (out <-chan item) {
	cha := make(chan item)
	go my.pipeitemSeenAttr(cha, inp, attr)
	return cha
}

// itemForkSeen returns two channels, `new` and `old`,
// where `new` is to receive
// all `inp`
// not been seen before
// and `old`
// all `inp`
// seen before
// (internally growing a `sync.Map` to discriminate)
// until close.
func (my *Rake) itemForkSeen(inp <-chan item) (new, old <-chan item) {
	cha1 := make(chan item)
	cha2 := make(chan item)
	go my.forkitemSeenAttr(cha1, cha2, inp, nil)
	return cha1, cha2
}

// itemForkSeenAttr returns two channels, `new` and `old`,
// where `new` is to receive
// all `inp`
// whose attribute `attr` has
// not been seen before
// and `old`
// all `inp`
// seen before
// (internally growing a `sync.Map` to discriminate)
// until close.
func (my *Rake) itemForkSeenAttr(inp <-chan item, attr func(a item) interface{}) (new, old <-chan item) {
	cha1 := make(chan item)
	cha2 := make(chan item)
	go my.forkitemSeenAttr(cha1, cha2, inp, attr)
	return cha1, cha2
}

func (my *Rake) pipeitemSeenAttr(out chan<- item, inp <-chan item, attr func(a item) interface{}) {
	defer close(out)

	if attr == nil { // Make `nil` value useful
		attr = func(a item) interface{} { return a }
	}

	seen := sync.Map{}
	for i := range inp {
		if _, visited := seen.LoadOrStore(attr(i), struct{}{}); visited {
			// drop i silently
		} else {
			out <- i
		}
	}
}

func (my *Rake) forkitemSeenAttr(new, old chan<- item, inp <-chan item, attr func(a item) interface{}) {
	defer close(new)
	defer close(old)

	if attr == nil { // Make `nil` value useful
		attr = func(a item) interface{} { return a }
	}

	seen := sync.Map{}
	for i := range inp {
		if _, visited := seen.LoadOrStore(attr(i), struct{}{}); visited {
			old <- i
		} else {
			new <- i
		}
	}
}

// itemTubeSeen returns a closure around itemPipeSeen()
// (silently dropping every item seen before).
func (my *Rake) itemTubeSeen() (tube func(inp <-chan item) (out <-chan item)) {

	return func(inp <-chan item) (out <-chan item) {
		return my.itemPipeSeen(inp)
	}
}

// itemTubeSeenAttr returns a closure around itemPipeSeenAttr()
// (silently dropping every item
// whose attribute `attr` was
// seen before).
func (my *Rake) itemTubeSeenAttr(attr func(a item) interface{}) (tube func(inp <-chan item) (out <-chan item)) {

	return func(inp <-chan item) (out <-chan item) {
		return my.itemPipeSeenAttr(inp, attr)
	}
}

// End of itemPipeSeen/itemForkSeen - an "I've seen this item before" filter / forker
// ===========================================================================
