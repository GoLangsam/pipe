// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.

package rake

// itemFrom is a receive-only item channel
type itemFrom <-chan item

// itemInto is a send-only item channel
type itemInto chan<- item

// ===========================================================================
// Beg of itemMake creators

// itemMakeChan returns a new open channel
// (simply a 'chan item' that is).
// Note: No 'item-producer' is launched here yet! (as is in all the other functions).
//  This is useful to easily create corresponding variables such as:
/*
var myitemPipelineStartsHere := itemMakeChan()
// ... lot's of code to design and build Your favourite "myitemWorkflowPipeline"
   // ...
   // ... *before* You start pouring data into it, e.g. simply via:
   for drop := range water {
myitemPipelineStartsHere <- drop
   }
close(myitemPipelineStartsHere)
*/
//  Hint: especially helpful, if Your piping library operates on some hidden (non-exported) type
//  (or on a type imported from elsewhere - and You don't want/need or should(!) have to care.)
//
// Note: as always (except for itemPipeBuffer) the channel is unbuffered.
//
func itemMakeChan() (out chan item) {
	return make(chan item)
}

// End of itemMake creators
// ===========================================================================

// ===========================================================================
// Beg of itemChan producers

// itemChan returns a channel to receive
// all inputs
// before close.
func itemChan(inp ...item) (out itemFrom) {
	cha := make(chan item)
	go chanitem(cha, inp...)
	return cha
}

func chanitem(out itemInto, inp ...item) {
	defer close(out)
	for i := range inp {
		out <- inp[i]
	}
}

// itemChanSlice returns a channel to receive
// all inputs
// before close.
func itemChanSlice(inp ...[]item) (out itemFrom) {
	cha := make(chan item)
	go chanitemSlice(cha, inp...)
	return cha
}

func chanitemSlice(out itemInto, inp ...[]item) {
	defer close(out)
	for i := range inp {
		for j := range inp[i] {
			out <- inp[i][j]
		}
	}
}

// itemChanFuncNok returns a channel to receive
// all results of generator `gen`
// until `!ok`
// before close.
func itemChanFuncNok(gen func() (item, bool)) (out itemFrom) {
	cha := make(chan item)
	go chanitemFuncNok(cha, gen)
	return cha
}

func chanitemFuncNok(out itemInto, gen func() (item, bool)) {
	defer close(out)
	for {
		res, ok := gen() // generate
		if !ok {
			return
		}
		out <- res
	}
}

// itemChanFuncErr returns a channel to receive
// all results of generator `gen`
// until `err != nil`
// before close.
func itemChanFuncErr(gen func() (item, error)) (out itemFrom) {
	cha := make(chan item)
	go chanitemFuncErr(cha, gen)
	return cha
}

func chanitemFuncErr(out itemInto, gen func() (item, error)) {
	defer close(out)
	for {
		res, err := gen() // generate
		if err != nil {
			return
		}
		out <- res
	}
}

// End of itemChan producers
// ===========================================================================

// ===========================================================================
// Beg of itemPipe functions

// itemPipeFunc returns a channel to receive
// every result of action `act` applied to `inp`
// before close.
// Note: it 'could' be itemPipeMap for functional people,
// but 'map' has a very different meaning in go lang.
func (inp itemFrom) itemPipeFunc(act func(a item) item) (out itemFrom) {
	cha := make(chan item)
	if act == nil { // Make `nil` value useful
		act = func(a item) item { return a }
	}
	go inp.pipeitemFunc(cha, act)
	return cha
}

func (inp itemFrom) pipeitemFunc(out itemInto, act func(a item) item) {
	defer close(out)
	for i := range inp {
		out <- act(i) // apply action
	}
}

// End of itemPipe functions
// ===========================================================================

// ===========================================================================
// Beg of itemTube closures around itemPipe

// itemTubeFunc returns a closure around PipeItemFunc (_, act).
func itemTubeFunc(act func(a item) item) (tube func(inp itemFrom) (out itemFrom)) {

	return func(inp itemFrom) (out itemFrom) {
		return inp.itemPipeFunc(act)
	}
}

// End of itemTube closures around itemPipe
// ===========================================================================

// ===========================================================================
// Beg of itemDone terminators

// itemDone returns a channel to receive
// one signal
// upon close
// and after `inp` has been drained.
func (inp itemFrom) itemDone() (done <-chan struct{}) {
	sig := make(chan struct{})
	go inp.doneitem(sig)
	return sig
}

func (inp itemFrom) doneitem(done chan<- struct{}) {
	defer close(done)
	for i := range inp {
		_ = i // Drain inp
	}
	done <- struct{}{}
}

// itemDoneSlice returns a channel to receive
// a slice with every item received on `inp`
// upon close.
//
// Note: Unlike itemDone, itemDoneSlice sends the fully accumulated slice, not just an event, once upon close of inp.
func (inp itemFrom) itemDoneSlice() (done <-chan []item) {
	sig := make(chan []item)
	go inp.doneitemSlice(sig)
	return sig
}

func (inp itemFrom) doneitemSlice(done chan<- []item) {
	defer close(done)
	slice := []item{}
	for i := range inp {
		slice = append(slice, i)
	}
	done <- slice
}

// itemDoneFunc
// will apply `act` to every `inp` and
// returns a channel to receive
// one signal
// upon close.
func (inp itemFrom) itemDoneFunc(act func(a item)) (done <-chan struct{}) {
	sig := make(chan struct{})
	if act == nil {
		act = func(a item) { return }
	}
	go inp.doneitemFunc(sig, act)
	return sig
}

func (inp itemFrom) doneitemFunc(done chan<- struct{}, act func(a item)) {
	defer close(done)
	for i := range inp {
		act(i) // apply action
	}
	done <- struct{}{}
}

// End of itemDone terminators
// ===========================================================================

// ===========================================================================
// Beg of itemFini closures

// itemFini returns a closure around `itemDone()`.
func (inp itemFrom) itemFini() func(inp itemFrom) (done <-chan struct{}) {

	return func(inp itemFrom) (done <-chan struct{}) {
		return inp.itemDone()
	}
}

// itemFiniSlice returns a closure around `itemDoneSlice()`.
func (inp itemFrom) itemFiniSlice() func(inp itemFrom) (done <-chan []item) {

	return func(inp itemFrom) (done <-chan []item) {
		return inp.itemDoneSlice()
	}
}

// itemFiniFunc returns a closure around `itemDoneFunc(act)`.
func (inp itemFrom) itemFiniFunc(act func(a item)) func(inp itemFrom) (done <-chan struct{}) {

	return func(inp itemFrom) (done <-chan struct{}) {
		return inp.itemDoneFunc(act)
	}
}

// End of itemFini closures
// ===========================================================================

// ===========================================================================
// Beg of itemPair functions

// itemPair returns a pair of channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func (inp itemFrom) itemPair() (out1, out2 itemFrom) {
	cha1 := make(chan item)
	cha2 := make(chan item)
	go inp.pairitem(cha1, cha2)
	return cha1, cha2
}

/* not used - kept for reference only.
func (inp itemFrom) pairitem(out1, out2 itemInto, inp itemFrom) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func (inp itemFrom) pairitem(out1, out2 itemInto) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of itemPair functions
// ===========================================================================

// ===========================================================================
// Beg of itemFork functions

// itemFork returns two channels
// either of which is to receive
// every result of inp
// before close.
func (inp itemFrom) itemFork() (out1, out2 itemFrom) {
	cha1 := make(chan item)
	cha2 := make(chan item)
	go inp.forkitem(cha1, cha2)
	return cha1, cha2
}

/* not used - kept for reference only.
func (inp itemFrom) forkitem(out1, out2 itemInto) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func (inp itemFrom) forkitem(out1, out2 itemInto) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of itemFork functions
// ===========================================================================

// ===========================================================================
// Beg of itemFanIn2 simple binary Fan-In

// itemFanIn2 returns a channel to receive
// all from both `inp` and `inp2`
// before close.
func (inp itemFrom) itemFanIn2(inp2 itemFrom) (out itemFrom) {
	cha := make(chan item)
	go inp.fanIn2item(cha, inp2)
	return cha
}

/* not used - kept for reference only.
// (inp itemFrom) fanin2item as seen in Go Concurrency Patterns
func fanin2item(out itemInto, inp, inp2 itemFrom) {
	for {
		select {
		case e := <-inp:
			out <- e
		case e := <-inp2:
			out <- e
		}
	}
} */

func (inp itemFrom) fanIn2item(out itemInto, inp2 itemFrom) {
	defer close(out)

	var (
		closed bool // we found a chan closed
		ok     bool // did we read successfully?
		e      item // what we've read
	)

	for !closed {
		select {
		case e, ok = <-inp:
			if ok {
				out <- e
			} else {
				inp = inp2    // swap inp2 into inp
				closed = true // break out of the loop
			}
		case e, ok = <-inp2:
			if ok {
				out <- e
			} else {
				closed = true // break out of the loop				}
			}
		}
	}

	// inp might not be closed yet. Drain it.
	for e = range inp {
		out <- e
	}
}

// End of itemFanIn2 simple binary Fan-In
// ===========================================================================
