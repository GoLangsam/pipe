// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package rake

import "time"

// ===========================================================================
// Beg of itemStrew - scatter them

// itemStrew returns a slice (of size = size) of channels
// one of which shall receive each inp before close.
func (my *Rake) itemStrew(inp <-chan item, size int) (outS [](<-chan item)) {
	chaS := make([]chan item, size)
	for i := 0; i < size; i++ {
		chaS[i] = make(chan item)
	}

	go my.strewitem(inp, chaS...)

	outS = make([]<-chan item, size)
	for i := 0; i < size; i++ {
		outS[i] = chaS[i] // convert `chan` to `<-chan`
	}

	return outS
}

// c strewitem(inp <-chan item, outS ...chan<- item) {
// Note: go does not convert the passed slice `[]chan item` to `[]chan<- item` automatically.
// So, we do neither here, as we are lazy (we just call an internal helper function).
func (my *Rake) strewitem(inp <-chan item, outS ...chan item) {

	for i := range inp {
		for !my.trySenditem(i, outS...) {
			time.Sleep(time.Millisecond * 10) // wait a little before retry
		} // !sent
	} // inp

	for o := range outS {
		close(outS[o])
	}
}

func (my *Rake) trySenditem(inp item, outS ...chan item) bool {

	for o := range outS {

		select { // try to send
		case outS[o] <- inp:
			return true
		default:
			// keep trying
		}

	} // outS
	return false
}

// End of itemStrew - scatter them
// ===========================================================================
