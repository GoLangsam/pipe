// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pipe

// ===========================================================================
// Beg of intFan2 easy fan-in's

// intFan2 returns a channel to receive
// everything from `inp`
// as well as
// all inputs
// before close.
func intFan2(inp <-chan int, inps ...int) (out <-chan int) {
	return intFanIn2(inp, intChan(inps...))
}

// intFan2Slice returns a channel to receive
// everything from `inp`
// as well as
// all inputs
// before close.
func intFan2Slice(inp <-chan int, inps ...[]int) (out <-chan int) {
	return intFanIn2(inp, intChanSlice(inps...))
}

// intFan2Chan returns a channel to receive
// everything from `inp`
// as well as
// everything from `inp2`
// before close.
// Note: intFan2Chan is nothing but intFanIn2
func intFan2Chan(inp <-chan int, inp2 <-chan int) (out <-chan int) {
	return intFanIn2(inp, inp2)
}

// intFan2FuncNok returns a channel to receive
// everything from `inp`
// as well as
// all results of generator `gen`
// until `!ok`
// before close.
func intFan2FuncNok(inp <-chan int, gen func() (int, bool)) (out <-chan int) {
	return intFanIn2(inp, intChanFuncNok(gen))
}

// intFan2FuncErr returns a channel to receive
// everything from `inp`
// as well as
// all results of generator `gen`
// until `err != nil`
// before close.
func intFan2FuncErr(inp <-chan int, gen func() (int, error)) (out <-chan int) {
	return intFanIn2(inp, intChanFuncErr(gen))
}

// End of intFan2 easy fan-in's
// ===========================================================================
