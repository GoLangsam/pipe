// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pipe

// ===========================================================================
// Beg of intFan2 easy fan-in's

// intFan2 returns a channel to receive
// everything from the given original channel `ori`
// as well as
// all inputs
// before close.
func intFan2(ori <-chan int, inp ...int) (out <-chan int) {
	return intFanIn2(ori, intChan(inp...))
}

// intFan2Slice returns a channel to receive
// everything from the given original channel `ori`
// as well as
// all inputs
// before close.
func intFan2Slice(ori <-chan int, inp ...[]int) (out <-chan int) {
	return intFanIn2(ori, intChanSlice(inp...))
}

// intFan2Chan returns a channel to receive
// everything from the given original channel `ori`
// as well as
// from the the input channel `inp`
// before close.
// Note: intFan2Chan is nothing but intFanIn2
func intFan2Chan(ori <-chan int, inp <-chan int) (out <-chan int) {
	return intFanIn2(ori, inp)
}

// intFan2FuncNok returns a channel to receive
// everything from the given original channel `ori`
// as well as
// all results of generator `gen`
// until `!ok`
// before close.
func intFan2FuncNok(ori <-chan int, gen func() (int, bool)) (out <-chan int) {
	return intFanIn2(ori, intChanFuncNok(gen))
}

// intFan2FuncErr returns a channel to receive
// everything from the given original channel `ori`
// as well as
// all results of generator `gen`
// until `err != nil`
// before close.
func intFan2FuncErr(ori <-chan int, gen func() (int, error)) (out <-chan int) {
	return intFanIn2(ori, intChanFuncErr(gen))
}

// End of intFan2 easy fan-in's
