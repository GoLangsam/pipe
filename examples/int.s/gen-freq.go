// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pipe

// ===========================================================================
// Beg of intDoneFreq - receive a frequency histogram

// intDoneFreq returns a channel to receive
// a frequency histogram (as a `map[int]int64`)
// upon close.
func intDoneFreq(inp <-chan int) (freq <-chan map[int]int64) {
	cha := make(chan map[int]int64)
	go doneintFreq(cha, inp)
	return cha
}

// intDoneFreqAttr returns a channel to receive
// a frequency histogram (as a `map[interface{}]int64`)
// upon close.
//
// `attr` provides the key to the frequency map.
// If `nil` is passed as `attr` then int is used as key.
func intDoneFreqAttr(inp <-chan int, attr func(a int) interface{}) (freq <-chan map[interface{}]int64) {
	cha := make(chan map[interface{}]int64)
	go doneintFreqAttr(cha, inp, attr)
	return cha
}

func doneintFreq(out chan<- map[int]int64, inp <-chan int) {
	defer close(out)
	freq := make(map[int]int64)

	for i := range inp {
		freq[i]++
	}
	out <- freq
}

func doneintFreqAttr(out chan<- map[interface{}]int64, inp <-chan int, attr func(a int) interface{}) {
	defer close(out)
	freq := make(map[interface{}]int64)

	if attr == nil { // Make `nil` value useful
		attr = func(a int) interface{} { return a }
	}

	for i := range inp {
		freq[attr(i)]++
	}
	out <- freq
}

// End of intDoneFreq - receive a frequency histogram
// ===========================================================================
