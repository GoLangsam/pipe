// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pipe

// ===========================================================================
// Beg of intFanOut

// intFanOut returns a slice (of size = size) of channels
// each of which shall receive any inp before close.
func intFanOut(inp <-chan int, size int) (outS [](<-chan int)) {
	chaS := make([]chan int, size)
	for i := 0; i < size; i++ {
		chaS[i] = make(chan int)
	}

	go fanintOut(inp, chaS...)

	outS = make([]<-chan int, size)
	for i := 0; i < size; i++ {
		outS[i] = (<-chan int)(chaS[i]) // convert `chan` to `<-chan`
	}

	return outS
}

// c fanintOut(inp <-chan int, outs ...chan<- int) {
func fanintOut(inp <-chan int, outs ...chan int) {

	for i := range inp {
		for o := range outs {
			outs[o] <- i
		}
	}

	for o := range outs {
		close(outs[o])
	}

}

// End of intFanOut
// ===========================================================================
