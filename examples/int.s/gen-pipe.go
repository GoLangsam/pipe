// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.

package pipe

// ===========================================================================
// Beg of intMake creators

// intMakeChan returns a new open channel
// (simply a 'chan int' that is).
// Note: No 'int-producer' is launched here yet! (as is in all the other functions).
//  This is useful to easily create corresponding variables such as:
/*
var myintPipelineStartsHere := intMakeChan()
// ... lot's of code to design and build Your favourite "myintWorkflowPipeline"
   // ...
   // ... *before* You start pouring data into it, e.g. simply via:
   for drop := range water {
myintPipelineStartsHere <- drop
   }
close(myintPipelineStartsHere)
*/
//  Hint: especially helpful, if Your piping library operates on some hidden (non-exported) type
//  (or on a type imported from elsewhere - and You don't want/need or should(!) have to care.)
//
// Note: as always (except for intPipeBuffer) the channel is unbuffered.
//
func intMakeChan() (out chan int) {
	return make(chan int)
}

// End of intMake creators
// ===========================================================================

// ===========================================================================
// Beg of intChan producers

// intChan returns a channel to receive
// all inputs
// before close.
func intChan(inp ...int) (out <-chan int) {
	cha := make(chan int)
	go chanint(cha, inp...)
	return cha
}

func chanint(out chan<- int, inp ...int) {
	defer close(out)
	for i := range inp {
		out <- inp[i]
	}
}

// intChanSlice returns a channel to receive
// all inputs
// before close.
func intChanSlice(inp ...[]int) (out <-chan int) {
	cha := make(chan int)
	go chanintSlice(cha, inp...)
	return cha
}

func chanintSlice(out chan<- int, inp ...[]int) {
	defer close(out)
	for i := range inp {
		for j := range inp[i] {
			out <- inp[i][j]
		}
	}
}

// intChanFuncNok returns a channel to receive
// all results of generator `gen`
// until `!ok`
// before close.
func intChanFuncNok(gen func() (int, bool)) (out <-chan int) {
	cha := make(chan int)
	go chanintFuncNok(cha, gen)
	return cha
}

func chanintFuncNok(out chan<- int, gen func() (int, bool)) {
	defer close(out)
	for {
		res, ok := gen() // generate
		if !ok {
			return
		}
		out <- res
	}
}

// intChanFuncErr returns a channel to receive
// all results of generator `gen`
// until `err != nil`
// before close.
func intChanFuncErr(gen func() (int, error)) (out <-chan int) {
	cha := make(chan int)
	go chanintFuncErr(cha, gen)
	return cha
}

func chanintFuncErr(out chan<- int, gen func() (int, error)) {
	defer close(out)
	for {
		res, err := gen() // generate
		if err != nil {
			return
		}
		out <- res
	}
}

// End of intChan producers
// ===========================================================================

// ===========================================================================
// Beg of intPipe functions

// intPipeFunc returns a channel to receive
// every result of action `act` applied to `inp`
// before close.
// Note: it 'could' be PipeIntMap for functional people,
// but 'map' has a very different meaning in go lang.
func intPipeFunc(inp <-chan int, act func(a int) int) (out <-chan int) {
	cha := make(chan int)
	if act == nil { // Make `nil` value useful
		act = func(a int) int { return a }
	}
	go pipeintFunc(cha, inp, act)
	return cha
}

func pipeintFunc(out chan<- int, inp <-chan int, act func(a int) int) {
	defer close(out)
	for i := range inp {
		out <- act(i) // apply action
	}
}

// intPipeBuffer returns a buffered channel with capacity `cap` to receive
// all `inp`
// before close.
func intPipeBuffer(inp <-chan int, cap int) (out <-chan int) {
	cha := make(chan int, cap)
	go pipeintBuffer(cha, inp)
	return cha
}

func pipeintBuffer(out chan<- int, inp <-chan int) {
	defer close(out)
	for i := range inp {
		out <- i
	}
}

// End of PipeInt functions
// ===========================================================================

// ===========================================================================
// Beg of intTube closures around intPipe

// intTubeFunc returns a closure around PipeIntFunc (_, act).
func intTubeFunc(act func(a int) int) (tube func(inp <-chan int) (out <-chan int)) {

	return func(inp <-chan int) (out <-chan int) {
		return intPipeFunc(inp, act)
	}
}

// intTubeBuffer returns a closure around PipeIntBuffer (_, cap).
func intTubeBuffer(cap int) (tube func(inp <-chan int) (out <-chan int)) {

	return func(inp <-chan int) (out <-chan int) {
		return intPipeBuffer(inp, cap)
	}
}

// End of intTube closures around intPipe
// ===========================================================================

// ===========================================================================
// Beg of intDone terminators

// intDone returns a channel to receive
// one signal before close after `inp` has been drained.
func intDone(inp <-chan int) (done <-chan struct{}) {
	sig := make(chan struct{})
	go doneint(sig, inp)
	return sig
}

func doneint(done chan<- struct{}, inp <-chan int) {
	defer close(done)
	for i := range inp {
		_ = i // Drain inp
	}
	done <- struct{}{}
}

// intDoneSlice returns a channel to receive
// a slice with every int received on `inp`
// before close.
//
// Note: Unlike intDone, DoneIntSlice sends the fully accumulated slice, not just an event, once upon close of inp.
func intDoneSlice(inp <-chan int) (done <-chan []int) {
	sig := make(chan []int)
	go doneintSlice(sig, inp)
	return sig
}

func doneintSlice(done chan<- []int, inp <-chan int) {
	defer close(done)
	slice := []int{}
	for i := range inp {
		slice = append(slice, i)
	}
	done <- slice
}

// intDoneFunc returns a channel to receive
// one signal after `act` has been applied to every `inp`
// before close.
func intDoneFunc(inp <-chan int, act func(a int)) (done <-chan struct{}) {
	sig := make(chan struct{})
	if act == nil {
		act = func(a int) { return }
	}
	go doneintFunc(sig, inp, act)
	return sig
}

func doneintFunc(done chan<- struct{}, inp <-chan int, act func(a int)) {
	defer close(done)
	for i := range inp {
		act(i) // apply action
	}
	done <- struct{}{}
}

// End of intDone terminators
// ===========================================================================

// ===========================================================================
// Beg of intFini closures

// intFini returns a closure around `intDone(_)`.
func intFini() func(inp <-chan int) (done <-chan struct{}) {

	return func(inp <-chan int) (done <-chan struct{}) {
		return intDone(inp)
	}
}

// intFiniSlice returns a closure around `intDoneSlice(_)`.
func intFiniSlice() func(inp <-chan int) (done <-chan []int) {

	return func(inp <-chan int) (done <-chan []int) {
		return intDoneSlice(inp)
	}
}

// intFiniFunc returns a closure around `intDoneFunc(_, act)`.
func intFiniFunc(act func(a int)) func(inp <-chan int) (done <-chan struct{}) {

	return func(inp <-chan int) (done <-chan struct{}) {
		return intDoneFunc(inp, act)
	}
}

// End of intFini closures
// ===========================================================================

// ===========================================================================
// Beg of intPair functions

// intPair returns a pair of channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func intPair(inp <-chan int) (out1, out2 <-chan int) {
	cha1 := make(chan int)
	cha2 := make(chan int)
	go pairint(cha1, cha2, inp)
	return cha1, cha2
}

/* not used - kept for reference only.
func pairint(out1, out2 chan<- int, inp <-chan int) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func pairint(out1, out2 chan<- int, inp <-chan int) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of intPair functions
// ===========================================================================

// ===========================================================================
// Beg of intFork functions

// intFork returns two channels
// either of which is to receive
// every result of inp
// before close.
func intFork(inp <-chan int) (out1, out2 <-chan int) {
	cha1 := make(chan int)
	cha2 := make(chan int)
	go forkint(cha1, cha2, inp)
	return cha1, cha2
}

/* not used - kept for reference only.
func forkint(out1, out2 chan<- int, inp <-chan int) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func forkint(out1, out2 chan<- int, inp <-chan int) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of intFork functions
// ===========================================================================

// ===========================================================================
// Beg of intFanIn2 simple binary Fan-In

// intFanIn2 returns a channel to receive all to receive all from both `inp1` and `inp2` before close.
func intFanIn2(inp1, inp2 <-chan int) (out <-chan int) {
	cha := make(chan int)
	go fanIn2int(cha, inp1, inp2)
	return cha
}

/* not used - kept for reference only.
// fanin2int as seen in Go Concurrency Patterns
func fanin2int(out chan<- int, inp1, inp2 <-chan int) {
	for {
		select {
		case e := <-inp1:
			out <- e
		case e := <-inp2:
			out <- e
		}
	}
} */

func fanIn2int(out chan<- int, inp1, inp2 <-chan int) {
	defer close(out)

	var (
		closed bool // we found a chan closed
		ok     bool // did we read successfully?
		e      int  // what we've read
	)

	for !closed {
		select {
		case e, ok = <-inp1:
			if ok {
				out <- e
			} else {
				inp1 = inp2   // swap inp2 into inp1
				closed = true // break out of the loop
			}
		case e, ok = <-inp2:
			if ok {
				out <- e
			} else {
				closed = true // break out of the loop				}
			}
		}
	}

	// inp1 might not be closed yet. Drain it.
	for e = range inp1 {
		out <- e
	}
}

// End of intFanIn2 simple binary Fan-In
