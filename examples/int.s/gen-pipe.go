// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.

package pipe

// ===========================================================================
// Beg of intMake creators

// intMakeChan returns a new open channel
// (simply a 'chan int' that is).
//
// Note: No 'Int-producer' is launched here yet! (as is in all the other functions).
//  This is useful to easily create corresponding variables such as:
//
// var myIntPipelineStartsHere := intMakeChan()
// // ... lot's of code to design and build Your favourite "myIntWorkflowPipeline"
// 	// ...
// 	// ... *before* You start pouring data into it, e.g. simply via:
// 	for drop := range water {
// myIntPipelineStartsHere <- drop
// 	}
// close(myIntPipelineStartsHere)
//
// Hint: especially helpful, if Your piping library operates on some hidden (non-exported) type
// (or on a type imported from elsewhere - and You don't want/need or should(!) have to care.)
//
// Note: as always (except for intPipeBuffer) the channel is unbuffered.
//
func intMakeChan() (out chan int) {
	return make(chan int)
}

// End of intMake creators
// ===========================================================================

// ===========================================================================
// Beg of intChan producers

// intChan returns a channel to receive
// all inputs
// before close.
func intChan(inp ...int) (out <-chan int) {
	cha := make(chan int)
	go chanInt(cha, inp...)
	return cha
}

func chanInt(out chan<- int, inp ...int) {
	defer close(out)
	for i := range inp {
		out <- inp[i]
	}
}

// intChanSlice returns a channel to receive
// all inputs
// before close.
func intChanSlice(inp ...[]int) (out <-chan int) {
	cha := make(chan int)
	go chanIntSlice(cha, inp...)
	return cha
}

func chanIntSlice(out chan<- int, inp ...[]int) {
	defer close(out)
	for i := range inp {
		for j := range inp[i] {
			out <- inp[i][j]
		}
	}
}

// intChanFuncNok returns a channel to receive
// all results of generator `gen`
// until `!ok`
// before close.
func intChanFuncNok(gen func() (int, bool)) (out <-chan int) {
	cha := make(chan int)
	go chanIntFuncNok(cha, gen)
	return cha
}

func chanIntFuncNok(out chan<- int, gen func() (int, bool)) {
	defer close(out)
	for {
		res, ok := gen() // generate
		if !ok {
			return
		}
		out <- res
	}
}

// intChanFuncErr returns a channel to receive
// all results of generator `gen`
// until `err != nil`
// before close.
func intChanFuncErr(gen func() (int, error)) (out <-chan int) {
	cha := make(chan int)
	go chanIntFuncErr(cha, gen)
	return cha
}

func chanIntFuncErr(out chan<- int, gen func() (int, error)) {
	defer close(out)
	for {
		res, err := gen() // generate
		if err != nil {
			return
		}
		out <- res
	}
}

// End of intChan producers
// ===========================================================================

// ===========================================================================
// Beg of intPipe functions

// intPipe
// will apply every `op` to every `inp` and
// returns a channel to receive
// each `inp`
// before close.
//
// Note: For functional people,
// this 'could' be named `IntMap`.
// Just: 'map' has a very different meaning in go lang.
func intPipe(inp <-chan int, ops ...func(a int)) (out <-chan int) {
	cha := make(chan int)
	go pipeInt(cha, inp, ops...)
	return cha
}

func pipeInt(out chan<- int, inp <-chan int, ops ...func(a int)) {
	defer close(out)
	for i := range inp {
		for _, op := range ops {
			if op != nil {
				op(i) // chain action
			}
		}
		out <- i // send it
	}
}

// intPipeFunc
// will chain every `act` to every `inp` and
// returns a channel to receive
// each result
// before close.
func intPipeFunc(inp <-chan int, acts ...func(a int) int) (out <-chan int) {
	cha := make(chan int)
	go pipeIntFunc(cha, inp, acts...)
	return cha
}

func pipeIntFunc(out chan<- int, inp <-chan int, acts ...func(a int) int) {
	defer close(out)
	for i := range inp {
		for _, act := range acts {
			if act != nil {
				i = act(i) // chain action
			}
		}
		out <- i // send result
	}
}

// End of intPipe functions
// ===========================================================================

// ===========================================================================
// Beg of intTube closures around intPipe

// intTube returns a closure around PipeInt (_, ops...).
func intTube(ops ...func(a int)) (tube func(inp <-chan int) (out <-chan int)) {

	return func(inp <-chan int) (out <-chan int) {
		return intPipe(inp, ops...)
	}
}

// intTubeFunc returns a closure around PipeIntFunc (_, acts...).
func intTubeFunc(acts ...func(a int) int) (tube func(inp <-chan int) (out <-chan int)) {

	return func(inp <-chan int) (out <-chan int) {
		return intPipeFunc(inp, acts...)
	}
}

// End of intTube closures around intPipe
// ===========================================================================

// ===========================================================================
// Beg of intDone terminators

// intDone
// will apply every `op` to every `inp` and
// returns a channel to receive
// one signal
// upon close.
func intDone(inp <-chan int, ops ...func(a int)) (done <-chan struct{}) {
	sig := make(chan struct{})
	go doneInt(sig, inp, ops...)
	return sig
}

func doneInt(done chan<- struct{}, inp <-chan int, ops ...func(a int)) {
	defer close(done)
	for i := range inp {
		for _, op := range ops {
			if op != nil {
				op(i) // apply operation
			}
		}
	}
	done <- struct{}{}
}

// intDoneFunc
// will chain every `act` to every `inp` and
// returns a channel to receive
// one signal
// upon close.
func intDoneFunc(inp <-chan int, acts ...func(a int) int) (done <-chan struct{}) {
	sig := make(chan struct{})
	go doneIntFunc(sig, inp, acts...)
	return sig
}

func doneIntFunc(done chan<- struct{}, inp <-chan int, acts ...func(a int) int) {
	defer close(done)
	for i := range inp {
		for _, act := range acts {
			if act != nil {
				i = act(i) // chain action
			}
		}
	}
	done <- struct{}{}
}

// intDoneSlice returns a channel to receive
// a slice with every int received on `inp`
// upon close.
//
// Note: Unlike intDone, intDoneSlice sends the fully accumulated slice, not just an event, once upon close of inp.
func intDoneSlice(inp <-chan int) (done <-chan []int) {
	sig := make(chan []int)
	go doneIntSlice(sig, inp)
	return sig
}

func doneIntSlice(done chan<- []int, inp <-chan int) {
	defer close(done)
	slice := []int{}
	for i := range inp {
		slice = append(slice, i)
	}
	done <- slice
}

// End of intDone terminators
// ===========================================================================

// ===========================================================================
// Beg of intFini closures

// intFini returns a closure around `IntDone(_, ops...)`.
func intFini(ops ...func(a int)) func(inp <-chan int) (done <-chan struct{}) {

	return func(inp <-chan int) (done <-chan struct{}) {
		return intDone(inp, ops...)
	}
}

// intFiniFunc returns a closure around `IntDoneFunc(_, acts...)`.
func intFiniFunc(acts ...func(a int) int) func(inp <-chan int) (done <-chan struct{}) {

	return func(inp <-chan int) (done <-chan struct{}) {
		return intDoneFunc(inp, acts...)
	}
}

// intFiniSlice returns a closure around `IntDoneSlice(_)`.
func intFiniSlice() func(inp <-chan int) (done <-chan []int) {

	return func(inp <-chan int) (done <-chan []int) {
		return intDoneSlice(inp)
	}
}

// End of intFini closures
// ===========================================================================

// ===========================================================================
// Beg of intPair functions

// intPair returns a pair of channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func intPair(inp <-chan int) (out1, out2 <-chan int) {
	cha1 := make(chan int)
	cha2 := make(chan int)
	go pairInt(cha1, cha2, inp)
	return cha1, cha2
}

/* not used - kept for reference only.
func pairInt ( out1 , out2 chan <- int , inp <- chan int ) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func pairInt(out1, out2 chan<- int, inp <-chan int) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of intPair functions
// ===========================================================================

// ===========================================================================
// Beg of intFork functions

// intFork returns two channels
// either of which is to receive
// every result of inp
// before close.
func intFork(inp <-chan int) (out1, out2 <-chan int) {
	cha1 := make(chan int)
	cha2 := make(chan int)
	go forkInt(cha1, cha2, inp)
	return cha1, cha2
}

/* not used - kept for reference only.
func forkInt ( out1 , out2 chan <- int , inp <- chan int ) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func forkInt(out1, out2 chan<- int, inp <-chan int) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of intFork functions
// ===========================================================================

// ===========================================================================
// Beg of intFanIn2 simple binary Fan-In

// intFanIn2 returns a channel to receive
// all from both `inp` and `inp2`
// before close.
func intFanIn2(inp, inp2 <-chan int) (out <-chan int) {
	cha := make(chan int)
	go fanIn2Int(cha, inp, inp2)
	return cha
}

/* not used - kept for reference only.
// fanin2Int as seen in Go Concurrency Patterns
func fanin2Int ( out chan <- int , inp , inp2 <- chan int ) {
	for {
		select {
		case e := <-inp:
			out <- e
		case e := <-inp2:
			out <- e
		}
	}
} */

func fanIn2Int(out chan<- int, inp, inp2 <-chan int) {
	defer close(out)

	var (
		closed bool // we found a chan closed
		ok     bool // did we read successfully?
		e      int  // what we've read
	)

	for !closed {
		select {
		case e, ok = <-inp:
			if ok {
				out <- e
			} else {
				inp = inp2    // swap inp2 into inp
				closed = true // break out of the loop
			}
		case e, ok = <-inp2:
			if ok {
				out <- e
			} else {
				closed = true // break out of the loop				}
			}
		}
	}

	// inp might not be closed yet. Drain it.
	for e = range inp {
		out <- e
	}
}

// End of intFanIn2 simple binary Fan-In
// ===========================================================================
