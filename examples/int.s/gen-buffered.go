// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pipe

// ===========================================================================
// Beg of intPipeBuffered - a buffered channel with capacity `cap` to receive

// intPipeBuffered returns a buffered channel with capacity `cap` to receive
// all `inp`
// before close.
func intPipeBuffered(inp <-chan int, cap int) (out <-chan int) {
	cha := make(chan int, cap)
	go pipeIntBuffered(cha, inp)
	return cha
}

func pipeIntBuffered(out chan<- int, inp <-chan int) {
	defer close(out)
	for i := range inp {
		out <- i
	}
}

// intTubeBuffered returns a closure around PipeIntBuffer (_, cap).
func intTubeBuffered(cap int) (tube func(inp <-chan int) (out <-chan int)) {

	return func(inp <-chan int) (out <-chan int) {
		return intPipeBuffered(inp, cap)
	}
}

// End of intPipeBuffered - a buffered channel with capacity `cap` to receive
// ===========================================================================
