// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package httpsyet

import "sync"

// ===========================================================================
// Beg of PipeSiteSeen/ForkSiteSeen - an "I've seen this site before" filter / fork

// PipeSiteSeen returns a channel to receive
// all `inp`
// not been seen before
// while silently dropping everything seen before
// (internally growing a `sync.Map` to discriminate)
// until close.
// Note: PipeSiteFilterNotSeenYet might be a better name, but is fairly long.
func PipeSiteSeen(inp <-chan site) (out <-chan site) {
	cha := make(chan site)
	go pipesiteSeenAttr(cha, inp, nil)
	return cha
}

// PipeSiteSeenAttr returns a channel to receive
// all `inp`
// whose attribute `attr` has
// not been seen before
// while silently dropping everything seen before
// (internally growing a `sync.Map` to discriminate)
// until close.
// Note: PipeSiteFilterAttrNotSeenYet might be a better name, but is fairly long.
func PipeSiteSeenAttr(inp <-chan site, attr func(a site) interface{}) (out <-chan site) {
	cha := make(chan site)
	go pipesiteSeenAttr(cha, inp, attr)
	return cha
}

// ForkSiteSeen returns two channels, `new` and `old`,
// where `new` is to receive
// all `inp`
// not been seen before
// and `old`
// all `inp`
// seen before
// (internally growing a `sync.Map` to discriminate)
// until close.
func ForkSiteSeen(inp <-chan site) (new, old <-chan site) {
	cha1 := make(chan site)
	cha2 := make(chan site)
	go forksiteSeenAttr(cha1, cha2, inp, nil)
	return cha1, cha2
}

// ForkSiteSeenAttr returns two channels, `new` and `old`,
// where `new` is to receive
// all `inp`
// whose attribute `attr` has
// not been seen before
// and `old`
// all `inp`
// seen before
// (internally growing a `sync.Map` to discriminate)
// until close.
func ForkSiteSeenAttr(inp <-chan site, attr func(a site) interface{}) (new, old <-chan site) {
	cha1 := make(chan site)
	cha2 := make(chan site)
	go forksiteSeenAttr(cha1, cha2, inp, attr)
	return cha1, cha2
}

func pipesiteSeenAttr(out chan<- site, inp <-chan site, attr func(a site) interface{}) {
	defer close(out)

	if attr == nil { // Make `nil` value useful
		attr = func(a site) interface{} { return a }
	}

	seen := sync.Map{}
	for i := range inp {
		if _, visited := seen.LoadOrStore(attr(i), struct{}{}); visited {
			// drop i silently
		} else {
			out <- i
		}
	}
}

func forksiteSeenAttr(new, old chan<- site, inp <-chan site, attr func(a site) interface{}) {
	defer close(new)
	defer close(old)

	if attr == nil { // Make `nil` value useful
		attr = func(a site) interface{} { return a }
	}

	seen := sync.Map{}
	for i := range inp {
		if _, visited := seen.LoadOrStore(attr(i), struct{}{}); visited {
			old <- i
		} else {
			new <- i
		}
	}
}

// TubeSiteSeen returns a closure around PipeSiteSeen()
// (silently dropping every site seen before).
func TubeSiteSeen() (tube func(inp <-chan site) (out <-chan site)) {

	return func(inp <-chan site) (out <-chan site) {
		return PipeSiteSeen(inp)
	}
}

// TubeSiteSeenAttr returns a closure around PipeSiteSeenAttr()
// (silently dropping every site
// whose attribute `attr` was
// seen before).
func TubeSiteSeenAttr(attr func(a site) interface{}) (tube func(inp <-chan site) (out <-chan site)) {

	return func(inp <-chan site) (out <-chan site) {
		return PipeSiteSeenAttr(inp, attr)
	}
}

// End of PipeSiteSeen/ForkSiteSeen - an "I've seen this site before" filter / fork
