// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.

package httpsyet

// ===========================================================================
// Beg of siteMake creators

// siteMakeChan returns a new open channel
// (simply a 'chan site' that is).
//
// Note: No 'Site-producer' is launched here yet! (as is in all the other functions).
//  This is useful to easily create corresponding variables such as:
//
// var mySitePipelineStartsHere := siteMakeChan()
// // ... lot's of code to design and build Your favourite "mySiteWorkflowPipeline"
// 	// ...
// 	// ... *before* You start pouring data into it, e.g. simply via:
// 	for drop := range water {
// mySitePipelineStartsHere <- drop
// 	}
// close(mySitePipelineStartsHere)
//
// Hint: especially helpful, if Your piping library operates on some hidden (non-exported) type
// (or on a type imported from elsewhere - and You don't want/need or should(!) have to care.)
//
// Note: as always (except for sitePipeBuffer) the channel is unbuffered.
//
func siteMakeChan() (out chan site) {
	return make(chan site)
}

// End of siteMake creators
// ===========================================================================

// ===========================================================================
// Beg of siteChan producers

// siteChan returns a channel to receive
// all inputs
// before close.
func siteChan(inp ...site) (out <-chan site) {
	cha := make(chan site)
	go chanSite(cha, inp...)
	return cha
}

func chanSite(out chan<- site, inp ...site) {
	defer close(out)
	for i := range inp {
		out <- inp[i]
	}
}

// siteChanSlice returns a channel to receive
// all inputs
// before close.
func siteChanSlice(inp ...[]site) (out <-chan site) {
	cha := make(chan site)
	go chanSiteSlice(cha, inp...)
	return cha
}

func chanSiteSlice(out chan<- site, inp ...[]site) {
	defer close(out)
	for i := range inp {
		for j := range inp[i] {
			out <- inp[i][j]
		}
	}
}

// siteChanFuncNok returns a channel to receive
// all results of generator `gen`
// until `!ok`
// before close.
func siteChanFuncNok(gen func() (site, bool)) (out <-chan site) {
	cha := make(chan site)
	go chanSiteFuncNok(cha, gen)
	return cha
}

func chanSiteFuncNok(out chan<- site, gen func() (site, bool)) {
	defer close(out)
	for {
		res, ok := gen() // generate
		if !ok {
			return
		}
		out <- res
	}
}

// siteChanFuncErr returns a channel to receive
// all results of generator `gen`
// until `err != nil`
// before close.
func siteChanFuncErr(gen func() (site, error)) (out <-chan site) {
	cha := make(chan site)
	go chanSiteFuncErr(cha, gen)
	return cha
}

func chanSiteFuncErr(out chan<- site, gen func() (site, error)) {
	defer close(out)
	for {
		res, err := gen() // generate
		if err != nil {
			return
		}
		out <- res
	}
}

// End of siteChan producers
// ===========================================================================

// ===========================================================================
// Beg of sitePipe functions

// sitePipe
// will apply every `op` to every `inp` and
// returns a channel to receive
// each `inp`
// before close.
//
// Note: For functional people,
// this 'could' be named `SiteMap`.
// Just: 'map' has a very different meaning in go lang.
func sitePipe(inp <-chan site, ops ...func(a site)) (out <-chan site) {
	cha := make(chan site)
	go pipeSite(cha, inp, ops...)
	return cha
}

func pipeSite(out chan<- site, inp <-chan site, ops ...func(a site)) {
	defer close(out)
	for i := range inp {
		for _, op := range ops {
			if op != nil {
				op(i) // chain action
			}
		}
		out <- i // send it
	}
}

// sitePipeFunc
// will chain every `act` to every `inp` and
// returns a channel to receive
// each result
// before close.
func sitePipeFunc(inp <-chan site, acts ...func(a site) site) (out <-chan site) {
	cha := make(chan site)
	go pipeSiteFunc(cha, inp, acts...)
	return cha
}

func pipeSiteFunc(out chan<- site, inp <-chan site, acts ...func(a site) site) {
	defer close(out)
	for i := range inp {
		for _, act := range acts {
			if act != nil {
				i = act(i) // chain action
			}
		}
		out <- i // send result
	}
}

// End of sitePipe functions
// ===========================================================================

// ===========================================================================
// Beg of siteTube closures around sitePipe

// siteTube returns a closure around PipeSite (_, ops...).
func siteTube(ops ...func(a site)) (tube func(inp <-chan site) (out <-chan site)) {

	return func(inp <-chan site) (out <-chan site) {
		return sitePipe(inp, ops...)
	}
}

// siteTubeFunc returns a closure around PipeSiteFunc (_, acts...).
func siteTubeFunc(acts ...func(a site) site) (tube func(inp <-chan site) (out <-chan site)) {

	return func(inp <-chan site) (out <-chan site) {
		return sitePipeFunc(inp, acts...)
	}
}

// End of siteTube closures around sitePipe
// ===========================================================================

// ===========================================================================
// Beg of siteDone terminators

// siteDone
// will apply every `op` to every `inp` and
// returns a channel to receive
// one signal
// upon close.
func siteDone(inp <-chan site, ops ...func(a site)) (done <-chan struct{}) {
	sig := make(chan struct{})
	go doneSite(sig, inp, ops...)
	return sig
}

func doneSite(done chan<- struct{}, inp <-chan site, ops ...func(a site)) {
	defer close(done)
	for i := range inp {
		for _, op := range ops {
			if op != nil {
				op(i) // apply operation
			}
		}
	}
	done <- struct{}{}
}

// siteDoneFunc
// will chain every `act` to every `inp` and
// returns a channel to receive
// one signal
// upon close.
func siteDoneFunc(inp <-chan site, acts ...func(a site) site) (done <-chan struct{}) {
	sig := make(chan struct{})
	go doneSiteFunc(sig, inp, acts...)
	return sig
}

func doneSiteFunc(done chan<- struct{}, inp <-chan site, acts ...func(a site) site) {
	defer close(done)
	for i := range inp {
		for _, act := range acts {
			if act != nil {
				i = act(i) // chain action
			}
		}
	}
	done <- struct{}{}
}

// siteDoneSlice returns a channel to receive
// a slice with every site received on `inp`
// upon close.
//
// Note: Unlike siteDone, siteDoneSlice sends the fully accumulated slice, not just an event, once upon close of inp.
func siteDoneSlice(inp <-chan site) (done <-chan []site) {
	sig := make(chan []site)
	go doneSiteSlice(sig, inp)
	return sig
}

func doneSiteSlice(done chan<- []site, inp <-chan site) {
	defer close(done)
	slice := []site{}
	for i := range inp {
		slice = append(slice, i)
	}
	done <- slice
}

// End of siteDone terminators
// ===========================================================================

// ===========================================================================
// Beg of siteFini closures

// siteFini returns a closure around `SiteDone(_, ops...)`.
func siteFini(ops ...func(a site)) func(inp <-chan site) (done <-chan struct{}) {

	return func(inp <-chan site) (done <-chan struct{}) {
		return siteDone(inp, ops...)
	}
}

// siteFiniFunc returns a closure around `SiteDoneFunc(_, acts...)`.
func siteFiniFunc(acts ...func(a site) site) func(inp <-chan site) (done <-chan struct{}) {

	return func(inp <-chan site) (done <-chan struct{}) {
		return siteDoneFunc(inp, acts...)
	}
}

// siteFiniSlice returns a closure around `SiteDoneSlice(_)`.
func siteFiniSlice() func(inp <-chan site) (done <-chan []site) {

	return func(inp <-chan site) (done <-chan []site) {
		return siteDoneSlice(inp)
	}
}

// End of siteFini closures
// ===========================================================================

// ===========================================================================
// Beg of sitePair functions

// sitePair returns a pair of channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func sitePair(inp <-chan site) (out1, out2 <-chan site) {
	cha1 := make(chan site)
	cha2 := make(chan site)
	go pairSite(cha1, cha2, inp)
	return cha1, cha2
}

/* not used - kept for reference only.
func pairSite ( out1 , out2 chan <- site , inp <- chan site ) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func pairSite(out1, out2 chan<- site, inp <-chan site) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of sitePair functions
// ===========================================================================

// ===========================================================================
// Beg of siteFork functions

// siteFork returns two channels
// either of which is to receive
// every result of inp
// before close.
func siteFork(inp <-chan site) (out1, out2 <-chan site) {
	cha1 := make(chan site)
	cha2 := make(chan site)
	go forkSite(cha1, cha2, inp)
	return cha1, cha2
}

/* not used - kept for reference only.
func forkSite ( out1 , out2 chan <- site , inp <- chan site ) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func forkSite(out1, out2 chan<- site, inp <-chan site) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of siteFork functions
// ===========================================================================

// ===========================================================================
// Beg of siteFanIn2 simple binary Fan-In

// siteFanIn2 returns a channel to receive
// all from both `inp` and `inp2`
// before close.
func siteFanIn2(inp, inp2 <-chan site) (out <-chan site) {
	cha := make(chan site)
	go fanIn2Site(cha, inp, inp2)
	return cha
}

/* not used - kept for reference only.
// fanin2Site as seen in Go Concurrency Patterns
func fanin2Site ( out chan <- site , inp , inp2 <- chan site ) {
	for {
		select {
		case e := <-inp:
			out <- e
		case e := <-inp2:
			out <- e
		}
	}
} */

func fanIn2Site(out chan<- site, inp, inp2 <-chan site) {
	defer close(out)

	var (
		closed bool // we found a chan closed
		ok     bool // did we read successfully?
		e      site // what we've read
	)

	for !closed {
		select {
		case e, ok = <-inp:
			if ok {
				out <- e
			} else {
				inp = inp2    // swap inp2 into inp
				closed = true // break out of the loop
			}
		case e, ok = <-inp2:
			if ok {
				out <- e
			} else {
				closed = true // break out of the loop				}
			}
		}
	}

	// inp might not be closed yet. Drain it.
	for e = range inp {
		out <- e
	}
}

// End of siteFanIn2 simple binary Fan-In
// ===========================================================================
