// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.

package httpsyet

// ===========================================================================
// Beg of stringMake creators

// stringMakeChan returns a new open channel
// (simply a 'chan string' that is).
//
// Note: No 'String-producer' is launched here yet! (as is in all the other functions).
//  This is useful to easily create corresponding variables such as:
//
// var myStringPipelineStartsHere := stringMakeChan()
// // ... lot's of code to design and build Your favourite "myStringWorkflowPipeline"
// 	// ...
// 	// ... *before* You start pouring data into it, e.g. simply via:
// 	for drop := range water {
// myStringPipelineStartsHere <- drop
// 	}
// close(myStringPipelineStartsHere)
//
// Hint: especially helpful, if Your piping library operates on some hidden (non-exported) type
// (or on a type imported from elsewhere - and You don't want/need or should(!) have to care.)
//
// Note: as always (except for stringPipeBuffer) the channel is unbuffered.
//
func stringMakeChan() (out chan string) {
	return make(chan string)
}

// End of stringMake creators
// ===========================================================================

// ===========================================================================
// Beg of stringChan producers

// stringChan returns a channel to receive
// all inputs
// before close.
func stringChan(inp ...string) (out <-chan string) {
	cha := make(chan string)
	go chanString(cha, inp...)
	return cha
}

func chanString(out chan<- string, inp ...string) {
	defer close(out)
	for i := range inp {
		out <- inp[i]
	}
}

// stringChanSlice returns a channel to receive
// all inputs
// before close.
func stringChanSlice(inp ...[]string) (out <-chan string) {
	cha := make(chan string)
	go chanStringSlice(cha, inp...)
	return cha
}

func chanStringSlice(out chan<- string, inp ...[]string) {
	defer close(out)
	for i := range inp {
		for j := range inp[i] {
			out <- inp[i][j]
		}
	}
}

// stringChanFuncNok returns a channel to receive
// all results of generator `gen`
// until `!ok`
// before close.
func stringChanFuncNok(gen func() (string, bool)) (out <-chan string) {
	cha := make(chan string)
	go chanStringFuncNok(cha, gen)
	return cha
}

func chanStringFuncNok(out chan<- string, gen func() (string, bool)) {
	defer close(out)
	for {
		res, ok := gen() // generate
		if !ok {
			return
		}
		out <- res
	}
}

// stringChanFuncErr returns a channel to receive
// all results of generator `gen`
// until `err != nil`
// before close.
func stringChanFuncErr(gen func() (string, error)) (out <-chan string) {
	cha := make(chan string)
	go chanStringFuncErr(cha, gen)
	return cha
}

func chanStringFuncErr(out chan<- string, gen func() (string, error)) {
	defer close(out)
	for {
		res, err := gen() // generate
		if err != nil {
			return
		}
		out <- res
	}
}

// End of stringChan producers
// ===========================================================================

// ===========================================================================
// Beg of stringPipe functions

// stringPipe
// will apply every `op` to every `inp` and
// returns a channel to receive
// each `inp`
// before close.
//
// Note: For functional people,
// this 'could' be named `StringMap`.
// Just: 'map' has a very different meaning in go lang.
func stringPipe(inp <-chan string, ops ...func(a string)) (out <-chan string) {
	cha := make(chan string)
	go pipeString(cha, inp, ops...)
	return cha
}

func pipeString(out chan<- string, inp <-chan string, ops ...func(a string)) {
	defer close(out)
	for i := range inp {
		for _, op := range ops {
			if op != nil {
				op(i) // chain action
			}
		}
		out <- i // send it
	}
}

// stringPipeFunc
// will chain every `act` to every `inp` and
// returns a channel to receive
// each result
// before close.
func stringPipeFunc(inp <-chan string, acts ...func(a string) string) (out <-chan string) {
	cha := make(chan string)
	go pipeStringFunc(cha, inp, acts...)
	return cha
}

func pipeStringFunc(out chan<- string, inp <-chan string, acts ...func(a string) string) {
	defer close(out)
	for i := range inp {
		for _, act := range acts {
			if act != nil {
				i = act(i) // chain action
			}
		}
		out <- i // send result
	}
}

// End of stringPipe functions
// ===========================================================================

// ===========================================================================
// Beg of stringTube closures around stringPipe

// stringTube returns a closure around PipeString (_, ops...).
func stringTube(ops ...func(a string)) (tube func(inp <-chan string) (out <-chan string)) {

	return func(inp <-chan string) (out <-chan string) {
		return stringPipe(inp, ops...)
	}
}

// stringTubeFunc returns a closure around PipeStringFunc (_, acts...).
func stringTubeFunc(acts ...func(a string) string) (tube func(inp <-chan string) (out <-chan string)) {

	return func(inp <-chan string) (out <-chan string) {
		return stringPipeFunc(inp, acts...)
	}
}

// End of stringTube closures around stringPipe
// ===========================================================================

// ===========================================================================
// Beg of stringDone terminators

// stringDone
// will apply every `op` to every `inp` and
// returns a channel to receive
// one signal
// upon close.
func stringDone(inp <-chan string, ops ...func(a string)) (done <-chan struct{}) {
	sig := make(chan struct{})
	go doneString(sig, inp, ops...)
	return sig
}

func doneString(done chan<- struct{}, inp <-chan string, ops ...func(a string)) {
	defer close(done)
	for i := range inp {
		for _, op := range ops {
			if op != nil {
				op(i) // apply operation
			}
		}
	}
	done <- struct{}{}
}

// stringDoneFunc
// will chain every `act` to every `inp` and
// returns a channel to receive
// one signal
// upon close.
func stringDoneFunc(inp <-chan string, acts ...func(a string) string) (done <-chan struct{}) {
	sig := make(chan struct{})
	go doneStringFunc(sig, inp, acts...)
	return sig
}

func doneStringFunc(done chan<- struct{}, inp <-chan string, acts ...func(a string) string) {
	defer close(done)
	for i := range inp {
		for _, act := range acts {
			if act != nil {
				i = act(i) // chain action
			}
		}
	}
	done <- struct{}{}
}

// stringDoneSlice returns a channel to receive
// a slice with every string received on `inp`
// upon close.
//
// Note: Unlike stringDone, stringDoneSlice sends the fully accumulated slice, not just an event, once upon close of inp.
func stringDoneSlice(inp <-chan string) (done <-chan []string) {
	sig := make(chan []string)
	go doneStringSlice(sig, inp)
	return sig
}

func doneStringSlice(done chan<- []string, inp <-chan string) {
	defer close(done)
	slice := []string{}
	for i := range inp {
		slice = append(slice, i)
	}
	done <- slice
}

// End of stringDone terminators
// ===========================================================================

// ===========================================================================
// Beg of stringFini closures

// stringFini returns a closure around `StringDone(_, ops...)`.
func stringFini(ops ...func(a string)) func(inp <-chan string) (done <-chan struct{}) {

	return func(inp <-chan string) (done <-chan struct{}) {
		return stringDone(inp, ops...)
	}
}

// stringFiniFunc returns a closure around `StringDoneFunc(_, acts...)`.
func stringFiniFunc(acts ...func(a string) string) func(inp <-chan string) (done <-chan struct{}) {

	return func(inp <-chan string) (done <-chan struct{}) {
		return stringDoneFunc(inp, acts...)
	}
}

// stringFiniSlice returns a closure around `StringDoneSlice(_)`.
func stringFiniSlice() func(inp <-chan string) (done <-chan []string) {

	return func(inp <-chan string) (done <-chan []string) {
		return stringDoneSlice(inp)
	}
}

// End of stringFini closures
// ===========================================================================

// ===========================================================================
// Beg of stringPair functions

// stringPair returns a pair of channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func stringPair(inp <-chan string) (out1, out2 <-chan string) {
	cha1 := make(chan string)
	cha2 := make(chan string)
	go pairString(cha1, cha2, inp)
	return cha1, cha2
}

/* not used - kept for reference only.
func pairString ( out1 , out2 chan <- string , inp <- chan string ) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func pairString(out1, out2 chan<- string, inp <-chan string) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of stringPair functions
// ===========================================================================

// ===========================================================================
// Beg of stringFork functions

// stringFork returns two channels
// either of which is to receive
// every result of inp
// before close.
func stringFork(inp <-chan string) (out1, out2 <-chan string) {
	cha1 := make(chan string)
	cha2 := make(chan string)
	go forkString(cha1, cha2, inp)
	return cha1, cha2
}

/* not used - kept for reference only.
func forkString ( out1 , out2 chan <- string , inp <- chan string ) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func forkString(out1, out2 chan<- string, inp <-chan string) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of stringFork functions
// ===========================================================================

// ===========================================================================
// Beg of stringFanIn2 simple binary Fan-In

// stringFanIn2 returns a channel to receive
// all from both `inp` and `inp2`
// before close.
func stringFanIn2(inp, inp2 <-chan string) (out <-chan string) {
	cha := make(chan string)
	go fanIn2String(cha, inp, inp2)
	return cha
}

/* not used - kept for reference only.
// fanin2String as seen in Go Concurrency Patterns
func fanin2String ( out chan <- string , inp , inp2 <- chan string ) {
	for {
		select {
		case e := <-inp:
			out <- e
		case e := <-inp2:
			out <- e
		}
	}
} */

func fanIn2String(out chan<- string, inp, inp2 <-chan string) {
	defer close(out)

	var (
		closed bool   // we found a chan closed
		ok     bool   // did we read successfully?
		e      string // what we've read
	)

	for !closed {
		select {
		case e, ok = <-inp:
			if ok {
				out <- e
			} else {
				inp = inp2    // swap inp2 into inp
				closed = true // break out of the loop
			}
		case e, ok = <-inp2:
			if ok {
				out <- e
			} else {
				closed = true // break out of the loop				}
			}
		}
	}

	// inp might not be closed yet. Drain it.
	for e = range inp {
		out <- e
	}
}

// End of stringFanIn2 simple binary Fan-In
// ===========================================================================
