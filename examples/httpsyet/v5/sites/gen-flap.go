// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package sites

// ===========================================================================
// Beg of SitePipeEnter/Leave - Flapdoors observed by a Waiter

// SiteWaiter - as implemented by `*sync.WaitGroup` -
// attends Flapdoors and keeps counting
// who enters and who leaves.
//
// Use SiteDoneWait to learn about
// when the facilities are closed.
//
// Note: You may also use Your provided `*sync.WaitGroup.Wait()`
// to know when to close the facilities.
// Just: SiteDoneWait is more convenient
// as it also closes the primary channel for You.
//
// Just make sure to have _all_ entrances and exits attended,
// and `Wait()` only *after* You've started flooding the facilities.
type SiteWaiter interface {
	Add(delta int)
	Done()
	Wait()
}

// Note: The name is intentionally generic in order to avoid eventual multiple-declaration clashes.

// SitePipeEnter returns a channel to receive
// all `inp`
// and registers throughput
// as arrival
// on the given `sync.WaitGroup`
// until close.
func (inp SiteFrom) SitePipeEnter(wg SiteWaiter) (out SiteFrom) {
	cha := make(chan Site)
	go inp.pipeSiteEnter(cha, wg)
	return cha
}

// SitePipeLeave returns a channel to receive
// all `inp`
// and registers throughput
// as departure
// on the given `sync.WaitGroup`
// until close.
func (inp SiteFrom) SitePipeLeave(wg SiteWaiter) (out SiteFrom) {
	cha := make(chan Site)
	go inp.pipeSiteLeave(cha, wg)
	return cha
}

// SiteDoneLeave returns a channel to receive
// one signal after
// all throughput on `inp`
// has been registered
// as departure
// on the given `sync.WaitGroup`
// before close.
func (inp SiteFrom) SiteDoneLeave(wg SiteWaiter) (done <-chan struct{}) {
	sig := make(chan struct{})
	go inp.doneSiteLeave(sig, wg)
	return sig
}

func (inp SiteFrom) pipeSiteEnter(out SiteInto, wg SiteWaiter) {
	defer close(out)
	for i := range inp {
		wg.Add(1)
		out <- i
	}
}

func (inp SiteFrom) pipeSiteLeave(out SiteInto, wg SiteWaiter) {
	defer close(out)
	for i := range inp {
		out <- i
		wg.Done()
	}
}

func (inp SiteFrom) doneSiteLeave(done chan<- struct{}, wg SiteWaiter) {
	defer close(done)
	for i := range inp {
		_ = i // discard
		wg.Done()
	}
	done <- struct{}{}
}

// SiteTubeEnter returns a closure around SitePipeEnter (wg)
// registering throughput
// as arrival
// on the given `sync.WaitGroup`.
func (inp SiteFrom) SiteTubeEnter(wg SiteWaiter) (tube func(inp SiteFrom) (out SiteFrom)) {

	return func(inp SiteFrom) (out SiteFrom) {
		return inp.SitePipeEnter(wg)
	}
}

// SiteTubeLeave returns a closure around SitePipeLeave (wg)
// registering throughput
// as departure
// on the given `sync.WaitGroup`.
func (inp SiteFrom) SiteTubeLeave(wg SiteWaiter) (tube func(inp SiteFrom) (out SiteFrom)) {

	return func(inp SiteFrom) (out SiteFrom) {
		return inp.SitePipeLeave(wg)
	}
}

// SiteFiniLeave returns a closure around `SiteDoneLeave(wg)`
// registering throughput
// as departure
// on the given `sync.WaitGroup`.
func (inp SiteFrom) SiteFiniLeave(wg SiteWaiter) func(inp SiteFrom) (done <-chan struct{}) {

	return func(inp SiteFrom) (done <-chan struct{}) {
		return inp.SiteDoneLeave(wg)
	}
}

// SiteDoneWait returns a channel to receive
// one signal
// after wg.Wait() has returned and out has been closed
// before close.
//
// Note: Use only *after* You've started flooding the facilities.
func (out SiteInto) SiteDoneWait(wg SiteWaiter) (done <-chan struct{}) {
	cha := make(chan struct{})
	go out.doneSiteWait(cha, wg)
	return cha
}

func (out SiteInto) doneSiteWait(done chan<- struct{}, wg SiteWaiter) {
	defer close(done)
	wg.Wait()
	close(out)
	done <- struct{}{} // not really needed - but looks better
}

// SiteFiniWait returns a closure around `SiteDoneWait(wg)`.
func (out SiteInto) SiteFiniWait(wg SiteWaiter) func(out SiteInto) (done <-chan struct{}) {

	return func(out SiteInto) (done <-chan struct{}) {
		return out.SiteDoneWait(wg)
	}
}

// End of SitePipeEnter/Leave - Flapdoors observed by a Waiter
// ===========================================================================
