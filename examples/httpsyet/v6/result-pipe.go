// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.

package httpsyet

// resultFrom is a receive-only result channel
type resultFrom <-chan result

// resultInto is a send-only result channel
type resultInto chan<- result

// ===========================================================================
// Beg of resultMake creators

// resultMakeChan returns a new open channel
// (simply a 'chan result' that is).
// Note: No 'Result-producer' is launched here yet! (as is in all the other functions).
//  This is useful to easily create corresponding variables such as:
/*
var myResultPipelineStartsHere := resultMakeChan ( ) ;
// ... lot's of code to design and build Your favourite "myResultWorkflowPipeline"
   // ...
   // ... *before* You start pouring data into it, e.g. simply via:
   for drop := range water {
myResultPipelineStartsHere <- drop ;
   }
close ( myResultPipelineStartsHere ) ;
*/
//  Hint: especially helpful, if Your piping library operates on some hidden (non-exported) type
//  (or on a type imported from elsewhere - and You don't want/need or should(!) have to care.)
//
// Note: as always (except for resultPipeBuffer) the channel is unbuffered.
//
func resultMakeChan() (out chan result) {
	return make(chan result)
}

// End of resultMake creators
// ===========================================================================

// ===========================================================================
// Beg of resultChan producers

// resultChan returns a channel to receive
// all inputs
// before close.
func resultChan(inp ...result) (out resultFrom) {
	cha := make(chan result)
	go chanResult(cha, inp...)
	return cha
}

func chanResult(out resultInto, inp ...result) {
	defer close(out)
	for i := range inp {
		out <- inp[i]
	}
}

// resultChanSlice returns a channel to receive
// all inputs
// before close.
func resultChanSlice(inp ...[]result) (out resultFrom) {
	cha := make(chan result)
	go chanResultSlice(cha, inp...)
	return cha
}

func chanResultSlice(out resultInto, inp ...[]result) {
	defer close(out)
	for i := range inp {
		for j := range inp[i] {
			out <- inp[i][j]
		}
	}
}

// resultChanFuncNok returns a channel to receive
// all results of generator `gen`
// until `!ok`
// before close.
func resultChanFuncNok(gen func() (result, bool)) (out resultFrom) {
	cha := make(chan result)
	go chanResultFuncNok(cha, gen)
	return cha
}

func chanResultFuncNok(out resultInto, gen func() (result, bool)) {
	defer close(out)
	for {
		res, ok := gen() // generate
		if !ok {
			return
		}
		out <- res
	}
}

// resultChanFuncErr returns a channel to receive
// all results of generator `gen`
// until `err != nil`
// before close.
func resultChanFuncErr(gen func() (result, error)) (out resultFrom) {
	cha := make(chan result)
	go chanResultFuncErr(cha, gen)
	return cha
}

func chanResultFuncErr(out resultInto, gen func() (result, error)) {
	defer close(out)
	for {
		res, err := gen() // generate
		if err != nil {
			return
		}
		out <- res
	}
}

// End of resultChan producers
// ===========================================================================

// ===========================================================================
// Beg of Pipe functions

// PipeFunc returns a channel to receive
// every result of action `act` applied to `inp`
// before close.
// Note: it 'could' be PipeMap for functional people,
// but 'map' has a very different meaning in go lang.
func (inp resultFrom) PipeFunc(act func(a result) result) (out resultFrom) {
	cha := make(chan result)
	if act == nil { // Make `nil` value useful
		act = func(a result) result { return a }
	}
	go inp.pipeFunc(cha, act)
	return cha
}

func (inp resultFrom) pipeFunc(out resultInto, act func(a result) result) {
	defer close(out)
	for i := range inp {
		out <- act(i) // apply action
	}
}

// End of Pipe functions
// ===========================================================================

// ===========================================================================
// Beg of Tube closures around Pipe

// TubeFunc returns a closure around PipeFunc (_, act).
func TubeFunc(act func(a result) result) (tube func(inp resultFrom) (out resultFrom)) {

	return func(inp resultFrom) (out resultFrom) {
		return inp.PipeFunc(act)
	}
}

// End of Tube closures around resultPipe
// ===========================================================================

// ===========================================================================
// Beg of Done terminators

// Done
// will apply every `op` to every `inp` and
// returns a channel to receive
// one signal
// upon close.
func (inp resultFrom) Done(ops ...func(a result)) (done <-chan struct{}) {
	sig := make(chan struct{})
	go inp.done(sig, ops...)
	return sig
}

func (inp resultFrom) done(done chan<- struct{}, ops ...func(a result)) {
	defer close(done)
	for i := range inp {
		for _, op := range ops {
			if op != nil {
				op(i) // apply operation
			}
		}
	}
	done <- struct{}{}
}

// DoneFunc
// will chain every `act` to every `inp` and
// returns a channel to receive
// one signal
// upon close.
func (inp resultFrom) DoneFunc(acts ...func(a result) result) (done <-chan struct{}) {
	sig := make(chan struct{})
	go inp.doneFunc(sig, acts...)
	return sig
}

func (inp resultFrom) doneFunc(done chan<- struct{}, acts ...func(a result) result) {
	defer close(done)
	for i := range inp {
		for _, act := range acts {
			if act != nil {
				i = act(i) // chain action
			}
		}
	}
	done <- struct{}{}
}

// DoneSlice returns a channel to receive
// a slice with every result received on `inp`
// upon close.
//
//  Note: Unlike Done, DoneSlice sends the fully accumulated slice, not just an event, once upon close of inp.
func (inp resultFrom) DoneSlice() (done <-chan []result) {
	sig := make(chan []result)
	go inp.doneSlice(sig)
	return sig
}

func (inp resultFrom) doneSlice(done chan<- []result) {
	defer close(done)
	slice := []result{}
	for i := range inp {
		slice = append(slice, i)
	}
	done <- slice
}

// End of Done terminators
// ===========================================================================

// ===========================================================================
// Beg of Fini closures

// Fini returns a closure around `Done(ops...)`.
func (inp resultFrom) Fini(ops ...func(a result)) func(inp resultFrom) (done <-chan struct{}) {

	return func(inp resultFrom) (done <-chan struct{}) {
		return inp.Done(ops...)
	}
}

// FiniFunc returns a closure around `DoneFunc(acts...)`.
func (inp resultFrom) FiniFunc(acts ...func(a result) result) func(inp resultFrom) (done <-chan struct{}) {

	return func(inp resultFrom) (done <-chan struct{}) {
		return inp.DoneFunc(acts...)
	}
}

// FiniSlice returns a closure around `DoneSlice()`.
func (inp resultFrom) FiniSlice() func(inp resultFrom) (done <-chan []result) {

	return func(inp resultFrom) (done <-chan []result) {
		return inp.DoneSlice()
	}
}

// End of Fini closures
// ===========================================================================

// ===========================================================================
// Beg of Pair functions

// Pair returns a pair of channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func (inp resultFrom) Pair() (out1, out2 resultFrom) {
	cha1 := make(chan result)
	cha2 := make(chan result)
	go inp.pair(cha1, cha2)
	return cha1, cha2
}

/* not used - kept for reference only.
func ( inp resultFrom ) pair ( out1 , out2 resultInto , inp resultFrom ) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func (inp resultFrom) pair(out1, out2 resultInto) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of Pair functions
// ===========================================================================

// ===========================================================================
// Beg of Fork functions

// Fork returns two channels
// either of which is to receive
// every result of inp
// before close.
func (inp resultFrom) Fork() (out1, out2 resultFrom) {
	cha1 := make(chan result)
	cha2 := make(chan result)
	go inp.fork(cha1, cha2)
	return cha1, cha2
}

/* not used - kept for reference only.
func ( inp resultFrom ) fork ( out1 , out2 resultInto ) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func (inp resultFrom) fork(out1, out2 resultInto) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of Fork functions
// ===========================================================================

// ===========================================================================
// Beg of FanIn2 simple binary Fan-In

// FanIn2 returns a channel to receive
// all from both `inp` and `inp2`
// before close.
func (inp resultFrom) FanIn2(inp2 resultFrom) (out resultFrom) {
	cha := make(chan result)
	go inp.fanIn2(cha, inp2)
	return cha
}

/* not used - kept for reference only.
// (inp resultFrom) fanin2 as seen in Go Concurrency Patterns
func fanin2 ( out resultInto , inp , inp2 resultFrom ) {
	for {
		select {
		case e := <-inp:
			out <- e
		case e := <-inp2:
			out <- e
		}
	}
} */

func (inp resultFrom) fanIn2(out resultInto, inp2 resultFrom) {
	defer close(out)

	var (
		closed bool   // we found a chan closed
		ok     bool   // did we read successfully?
		e      result // what we've read
	)

	for !closed {
		select {
		case e, ok = <-inp:
			if ok {
				out <- e
			} else {
				inp = inp2    // swap inp2 into inp
				closed = true // break out of the loop
			}
		case e, ok = <-inp2:
			if ok {
				out <- e
			} else {
				closed = true // break out of the loop				}
			}
		}
	}

	// inp might not be closed yet. Drain it.
	for e = range inp {
		out <- e
	}
}

// End of FanIn2 simple binary Fan-In
// ===========================================================================
