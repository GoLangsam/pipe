// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package sites

import "time"

// ===========================================================================
// Beg of SiteStrew - scatter them

// SiteStrew returns a slice (of size = size) of channels
// one of which shall receive each inp before close.
func SiteStrew(inp <-chan Site, size int) (outS [](<-chan Site)) {
	chaS := make([]chan Site, size)
	for i := 0; i < size; i++ {
		chaS[i] = make(chan Site)
	}

	go strewSite(inp, chaS...)

	outS = make([]<-chan Site, size)
	for i := 0; i < size; i++ {
		outS[i] = chaS[i] // convert `chan` to `<-chan`
	}

	return outS
}

// c strewSite(inp <-chan Site, outS ...chan<- Site) {
// Note: go does not convert the passed slice `[]chan Site` to `[]chan<- Site` automatically.
// So, we do neither here, as we are lazy (we just call an internal helper function).
func strewSite(inp <-chan Site, outS ...chan Site) {

	for i := range inp {
		for !trySendSite(i, outS...) {
			time.Sleep(time.Millisecond * 10) // wait a little before retry
		} // !sent
	} // inp

	for o := range outS {
		close(outS[o])
	}
}

func trySendSite(inp Site, outS ...chan Site) bool {

	for o := range outS {

		select { // try to send
		case outS[o] <- inp:
			return true
		default:
			// keep trying
		}

	} // outS
	return false
}

// End of SiteStrew - scatter them
// ===========================================================================
