// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package sites

// ===========================================================================
// Beg of SiteJoin feedback back-feeders for circular networks

// SiteJoin sends inputs on the given out channel and returns a done channel to receive one signal when inp has been drained
func SiteJoin(out chan<- Site, inp ...Site) (done <-chan struct{}) {
	sig := make(chan struct{})
	go joinSite(sig, out, inp...)
	return sig
}

func joinSite(done chan<- struct{}, out chan<- Site, inp ...Site) {
	defer close(done)
	for i := range inp {
		out <- inp[i]
	}
	done <- struct{}{}
}

// SiteJoinSlice sends inputs on the given out channel and returns a done channel to receive one signal when inp has been drained
func SiteJoinSlice(out chan<- Site, inp ...[]Site) (done <-chan struct{}) {
	sig := make(chan struct{})
	go joinSiteSlice(sig, out, inp...)
	return sig
}

func joinSiteSlice(done chan<- struct{}, out chan<- Site, inp ...[]Site) {
	defer close(done)
	for i := range inp {
		for j := range inp[i] {
			out <- inp[i][j]
		}
	}
	done <- struct{}{}
}

// SiteJoinChan sends inputs on the given out channel and returns a done channel to receive one signal when inp has been drained
func SiteJoinChan(out chan<- Site, inp <-chan Site) (done <-chan struct{}) {
	sig := make(chan struct{})
	go joinSiteChan(sig, out, inp)
	return sig
}

func joinSiteChan(done chan<- struct{}, out chan<- Site, inp <-chan Site) {
	defer close(done)
	for i := range inp {
		out <- i
	}
	done <- struct{}{}
}

// End of SiteJoin feedback back-feeders for circular networks
