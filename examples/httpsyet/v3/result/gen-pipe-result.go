// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.

package result

// ===========================================================================
// Beg of MakeResult creators

// MakeResultChan returns a new open channel
// (simply a 'chan Result' that is).
// Note: No 'Result-producer' is launched here yet! (as is in all the other functions).
//  This is useful to easily create corresponding variables such as:
/*
var myResultPipelineStartsHere := MakeResultChan()
// ... lot's of code to design and build Your favourite "myResultWorkflowPipeline"
   // ...
   // ... *before* You start pouring data into it, e.g. simply via:
   for drop := range water {
myResultPipelineStartsHere <- drop
   }
close(myResultPipelineStartsHere)
*/
//  Hint: especially helpful, if Your piping library operates on some hidden (non-exported) type
//  (or on a type imported from elsewhere - and You don't want/need or should(!) have to care.)
//
// Note: as always (except for PipeResultBuffer) the channel is unbuffered.
//
func MakeResultChan() (out chan Result) {
	return make(chan Result)
}

// End of MakeResult creators
// ===========================================================================

// ===========================================================================
// Beg of ChanResult producers

// ChanResult returns a channel to receive
// all inputs
// before close.
func ChanResult(inp ...Result) (out <-chan Result) {
	cha := make(chan Result)
	go chanResult(cha, inp...)
	return cha
}

func chanResult(out chan<- Result, inp ...Result) {
	defer close(out)
	for i := range inp {
		out <- inp[i]
	}
}

// ChanResultSlice returns a channel to receive
// all inputs
// before close.
func ChanResultSlice(inp ...[]Result) (out <-chan Result) {
	cha := make(chan Result)
	go chanResultSlice(cha, inp...)
	return cha
}

func chanResultSlice(out chan<- Result, inp ...[]Result) {
	defer close(out)
	for i := range inp {
		for j := range inp[i] {
			out <- inp[i][j]
		}
	}
}

// ChanResultFuncNok returns a channel to receive
// all results of generator `gen`
// until `!ok`
// before close.
func ChanResultFuncNok(gen func() (Result, bool)) (out <-chan Result) {
	cha := make(chan Result)
	go chanResultFuncNok(cha, gen)
	return cha
}

func chanResultFuncNok(out chan<- Result, gen func() (Result, bool)) {
	defer close(out)
	for {
		res, ok := gen() // generate
		if !ok {
			return
		}
		out <- res
	}
}

// ChanResultFuncErr returns a channel to receive
// all results of generator `gen`
// until `err != nil`
// before close.
func ChanResultFuncErr(gen func() (Result, error)) (out <-chan Result) {
	cha := make(chan Result)
	go chanResultFuncErr(cha, gen)
	return cha
}

func chanResultFuncErr(out chan<- Result, gen func() (Result, error)) {
	defer close(out)
	for {
		res, err := gen() // generate
		if err != nil {
			return
		}
		out <- res
	}
}

// End of ChanResult producers
// ===========================================================================

// ===========================================================================
// Beg of PipeResult functions

// PipeResultFunc returns a channel to receive
// every result of action `act` applied to `inp`
// before close.
// Note: it 'could' be PipeResultMap for functional people,
// but 'map' has a very different meaning in go lang.
func PipeResultFunc(inp <-chan Result, act func(a Result) Result) (out <-chan Result) {
	cha := make(chan Result)
	if act == nil { // Make `nil` value useful
		act = func(a Result) Result { return a }
	}
	go pipeResultFunc(cha, inp, act)
	return cha
}

func pipeResultFunc(out chan<- Result, inp <-chan Result, act func(a Result) Result) {
	defer close(out)
	for i := range inp {
		out <- act(i) // apply action
	}
}

// PipeResultBuffer returns a buffered channel with capacity `cap` to receive
// all `inp`
// before close.
func PipeResultBuffer(inp <-chan Result, cap int) (out <-chan Result) {
	cha := make(chan Result, cap)
	go pipeResultBuffer(cha, inp)
	return cha
}

func pipeResultBuffer(out chan<- Result, inp <-chan Result) {
	defer close(out)
	for i := range inp {
		out <- i
	}
}

// End of PipeResult functions
// ===========================================================================

// ===========================================================================
// Beg of TubeResult closures

// TubeResultFunc returns a closure around PipeResultFunc (_, act).
func TubeResultFunc(act func(a Result) Result) (tube func(inp <-chan Result) (out <-chan Result)) {

	return func(inp <-chan Result) (out <-chan Result) {
		return PipeResultFunc(inp, act)
	}
}

// TubeResultBuffer returns a closure around PipeResultBuffer (_, cap).
func TubeResultBuffer(cap int) (tube func(inp <-chan Result) (out <-chan Result)) {

	return func(inp <-chan Result) (out <-chan Result) {
		return PipeResultBuffer(inp, cap)
	}
}

// End of TubeResult closures
// ===========================================================================

// ===========================================================================
// Beg of DoneResult terminators

// DoneResult returns a channel to receive
// one signal before close after `inp` has been drained.
func DoneResult(inp <-chan Result) (done <-chan struct{}) {
	sig := make(chan struct{})
	go doitResult(sig, inp)
	return sig
}

func doitResult(done chan<- struct{}, inp <-chan Result) {
	defer close(done)
	for i := range inp {
		_ = i // Drain inp
	}
	done <- struct{}{}
}

// DoneResultSlice returns a channel to receive
// a slice with every Result received on `inp`
// before close.
//
// Note: Unlike DoneResult, DoneResultSlice sends the fully accumulated slice, not just an event, once upon close of inp.
func DoneResultSlice(inp <-chan Result) (done <-chan []Result) {
	sig := make(chan []Result)
	go doitResultSlice(sig, inp)
	return sig
}

func doitResultSlice(done chan<- []Result, inp <-chan Result) {
	defer close(done)
	slice := []Result{}
	for i := range inp {
		slice = append(slice, i)
	}
	done <- slice
}

// DoneResultFunc returns a channel to receive
// one signal after `act` has been applied to every `inp`
// before close.
func DoneResultFunc(inp <-chan Result, act func(a Result)) (done <-chan struct{}) {
	sig := make(chan struct{})
	if act == nil {
		act = func(a Result) { return }
	}
	go doitResultFunc(sig, inp, act)
	return sig
}

func doitResultFunc(done chan<- struct{}, inp <-chan Result, act func(a Result)) {
	defer close(done)
	for i := range inp {
		act(i) // apply action
	}
	done <- struct{}{}
}

// End of DoneResult terminators
// ===========================================================================

// ===========================================================================
// Beg of FiniResult closures

// FiniResult returns a closure around `DoneResult(_)`.
func FiniResult() func(inp <-chan Result) (done <-chan struct{}) {

	return func(inp <-chan Result) (done <-chan struct{}) {
		return DoneResult(inp)
	}
}

// FiniResultSlice returns a closure around `DoneResultSlice(_)`.
func FiniResultSlice() func(inp <-chan Result) (done <-chan []Result) {

	return func(inp <-chan Result) (done <-chan []Result) {
		return DoneResultSlice(inp)
	}
}

// FiniResultFunc returns a closure around `DoneResultFunc(_, act)`.
func FiniResultFunc(act func(a Result)) func(inp <-chan Result) (done <-chan struct{}) {

	return func(inp <-chan Result) (done <-chan struct{}) {
		return DoneResultFunc(inp, act)
	}
}

// End of FiniResult closures
// ===========================================================================

// ===========================================================================
// Beg of PairResult functions

// PairResult returns a pair of channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func PairResult(inp <-chan Result) (out1, out2 <-chan Result) {
	cha1 := make(chan Result)
	cha2 := make(chan Result)
	go pairResult(cha1, cha2, inp)
	return cha1, cha2
}

/* not used any more - kept for reference only.
func pairResult(out1, out2 chan<- Result, inp <-chan Result) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func pairResult(out1, out2 chan<- Result, inp <-chan Result) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of PairResult functions
// ===========================================================================

// ===========================================================================
// Beg of ForkResult functions

// ForkResult returns two channels
// either of which is to receive
// every result of inp
// before close.
func ForkResult(inp <-chan Result) (out1, out2 <-chan Result) {
	cha1 := make(chan Result)
	cha2 := make(chan Result)
	go forkResult(cha1, cha2, inp)
	return cha1, cha2
}

/* not used any more - kept for reference only.
func forkResult(out1, out2 chan<- Result, inp <-chan Result) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func forkResult(out1, out2 chan<- Result, inp <-chan Result) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of ForkResult functions
// ===========================================================================

// ===========================================================================
// Beg of FanIn2Result simple binary Fan-In

// FanIn2Result returns a channel to receive all to receive all from both `inp1` and `inp2` before close.
func FanIn2Result(inp1, inp2 <-chan Result) (out <-chan Result) {
	cha := make(chan Result)
	go fanIn2Result(cha, inp1, inp2)
	return cha
}

/* not used any more - kept for reference only.
// fanin2Result as seen in Go Concurrency Patterns
func fanin2Result(out chan<- Result, inp1, inp2 <-chan Result) {
	for {
		select {
		case e := <-inp1:
			out <- e
		case e := <-inp2:
			out <- e
		}
	}
} */

func fanIn2Result(out chan<- Result, inp1, inp2 <-chan Result) {
	defer close(out)

	var (
		closed bool   // we found a chan closed
		ok     bool   // did we read successfully?
		e      Result // what we've read
	)

	for !closed {
		select {
		case e, ok = <-inp1:
			if ok {
				out <- e
			} else {
				inp1 = inp2   // swap inp2 into inp1
				closed = true // break out of the loop
			}
		case e, ok = <-inp2:
			if ok {
				out <- e
			} else {
				closed = true // break out of the loop				}
			}
		}
	}

	// inp1 might not be closed yet. Drain it.
	for e = range inp1 {
		out <- e
	}
}

// End of FanIn2Result simple binary Fan-In
