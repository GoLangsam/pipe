// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.

package httpsyet

// ===========================================================================
// Beg of resultMake creators

// resultMakeChan returns a new open channel
// (simply a 'chan result' that is).
// Note: No 'result-producer' is launched here yet! (as is in all the other functions).
//  This is useful to easily create corresponding variables such as:
/*
var myresultPipelineStartsHere := resultMakeChan()
// ... lot's of code to design and build Your favourite "myresultWorkflowPipeline"
   // ...
   // ... *before* You start pouring data into it, e.g. simply via:
   for drop := range water {
myresultPipelineStartsHere <- drop
   }
close(myresultPipelineStartsHere)
*/
//  Hint: especially helpful, if Your piping library operates on some hidden (non-exported) type
//  (or on a type imported from elsewhere - and You don't want/need or should(!) have to care.)
//
// Note: as always (except for resultPipeBuffer) the channel is unbuffered.
//
func resultMakeChan() (out chan result) {
	return make(chan result)
}

// End of resultMake creators
// ===========================================================================

// ===========================================================================
// Beg of resultChan producers

// resultChan returns a channel to receive
// all inputs
// before close.
func resultChan(inp ...result) (out <-chan result) {
	cha := make(chan result)
	go chanresult(cha, inp...)
	return cha
}

func chanresult(out chan<- result, inp ...result) {
	defer close(out)
	for i := range inp {
		out <- inp[i]
	}
}

// resultChanSlice returns a channel to receive
// all inputs
// before close.
func resultChanSlice(inp ...[]result) (out <-chan result) {
	cha := make(chan result)
	go chanresultSlice(cha, inp...)
	return cha
}

func chanresultSlice(out chan<- result, inp ...[]result) {
	defer close(out)
	for i := range inp {
		for j := range inp[i] {
			out <- inp[i][j]
		}
	}
}

// resultChanFuncNok returns a channel to receive
// all results of generator `gen`
// until `!ok`
// before close.
func resultChanFuncNok(gen func() (result, bool)) (out <-chan result) {
	cha := make(chan result)
	go chanresultFuncNok(cha, gen)
	return cha
}

func chanresultFuncNok(out chan<- result, gen func() (result, bool)) {
	defer close(out)
	for {
		res, ok := gen() // generate
		if !ok {
			return
		}
		out <- res
	}
}

// resultChanFuncErr returns a channel to receive
// all results of generator `gen`
// until `err != nil`
// before close.
func resultChanFuncErr(gen func() (result, error)) (out <-chan result) {
	cha := make(chan result)
	go chanresultFuncErr(cha, gen)
	return cha
}

func chanresultFuncErr(out chan<- result, gen func() (result, error)) {
	defer close(out)
	for {
		res, err := gen() // generate
		if err != nil {
			return
		}
		out <- res
	}
}

// End of resultChan producers
// ===========================================================================

// ===========================================================================
// Beg of resultPipe functions

// resultPipeFunc returns a channel to receive
// every result of action `act` applied to `inp`
// before close.
// Note: it 'could' be PipeResultMap for functional people,
// but 'map' has a very different meaning in go lang.
func resultPipeFunc(inp <-chan result, act func(a result) result) (out <-chan result) {
	cha := make(chan result)
	if act == nil { // Make `nil` value useful
		act = func(a result) result { return a }
	}
	go piperesultFunc(cha, inp, act)
	return cha
}

func piperesultFunc(out chan<- result, inp <-chan result, act func(a result) result) {
	defer close(out)
	for i := range inp {
		out <- act(i) // apply action
	}
}

// End of PipeResult functions
// ===========================================================================

// ===========================================================================
// Beg of resultTube closures around resultPipe

// resultTubeFunc returns a closure around PipeResultFunc (_, act).
func resultTubeFunc(act func(a result) result) (tube func(inp <-chan result) (out <-chan result)) {

	return func(inp <-chan result) (out <-chan result) {
		return resultPipeFunc(inp, act)
	}
}

// End of resultTube closures around resultPipe
// ===========================================================================

// ===========================================================================
// Beg of resultDone terminators

// resultDone returns a channel to receive
// one signal before close after `inp` has been drained.
func resultDone(inp <-chan result) (done <-chan struct{}) {
	sig := make(chan struct{})
	go doneresult(sig, inp)
	return sig
}

func doneresult(done chan<- struct{}, inp <-chan result) {
	defer close(done)
	for i := range inp {
		_ = i // Drain inp
	}
	done <- struct{}{}
}

// resultDoneSlice returns a channel to receive
// a slice with every result received on `inp`
// before close.
//
// Note: Unlike resultDone, DoneResultSlice sends the fully accumulated slice, not just an event, once upon close of inp.
func resultDoneSlice(inp <-chan result) (done <-chan []result) {
	sig := make(chan []result)
	go doneresultSlice(sig, inp)
	return sig
}

func doneresultSlice(done chan<- []result, inp <-chan result) {
	defer close(done)
	slice := []result{}
	for i := range inp {
		slice = append(slice, i)
	}
	done <- slice
}

// resultDoneFunc returns a channel to receive
// one signal after `act` has been applied to every `inp`
// before close.
func resultDoneFunc(inp <-chan result, act func(a result)) (done <-chan struct{}) {
	sig := make(chan struct{})
	if act == nil {
		act = func(a result) { return }
	}
	go doneresultFunc(sig, inp, act)
	return sig
}

func doneresultFunc(done chan<- struct{}, inp <-chan result, act func(a result)) {
	defer close(done)
	for i := range inp {
		act(i) // apply action
	}
	done <- struct{}{}
}

// End of resultDone terminators
// ===========================================================================

// ===========================================================================
// Beg of resultFini closures

// resultFini returns a closure around `resultDone(_)`.
func resultFini() func(inp <-chan result) (done <-chan struct{}) {

	return func(inp <-chan result) (done <-chan struct{}) {
		return resultDone(inp)
	}
}

// resultFiniSlice returns a closure around `resultDoneSlice(_)`.
func resultFiniSlice() func(inp <-chan result) (done <-chan []result) {

	return func(inp <-chan result) (done <-chan []result) {
		return resultDoneSlice(inp)
	}
}

// resultFiniFunc returns a closure around `resultDoneFunc(_, act)`.
func resultFiniFunc(act func(a result)) func(inp <-chan result) (done <-chan struct{}) {

	return func(inp <-chan result) (done <-chan struct{}) {
		return resultDoneFunc(inp, act)
	}
}

// End of resultFini closures
// ===========================================================================

// ===========================================================================
// Beg of resultPair functions

// resultPair returns a pair of channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func resultPair(inp <-chan result) (out1, out2 <-chan result) {
	cha1 := make(chan result)
	cha2 := make(chan result)
	go pairresult(cha1, cha2, inp)
	return cha1, cha2
}

/* not used - kept for reference only.
func pairresult(out1, out2 chan<- result, inp <-chan result) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func pairresult(out1, out2 chan<- result, inp <-chan result) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of resultPair functions
// ===========================================================================

// ===========================================================================
// Beg of resultFork functions

// resultFork returns two channels
// either of which is to receive
// every result of inp
// before close.
func resultFork(inp <-chan result) (out1, out2 <-chan result) {
	cha1 := make(chan result)
	cha2 := make(chan result)
	go forkresult(cha1, cha2, inp)
	return cha1, cha2
}

/* not used - kept for reference only.
func forkresult(out1, out2 chan<- result, inp <-chan result) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		out1 <- i
		out2 <- i
	}
} */

func forkresult(out1, out2 chan<- result, inp <-chan result) {
	defer close(out1)
	defer close(out2)
	for i := range inp {
		select { // send first to whomever is ready to receive
		case out1 <- i:
			out2 <- i
		case out2 <- i:
			out1 <- i
		}
	}
}

// End of resultFork functions
// ===========================================================================

// ===========================================================================
// Beg of resultFanIn2 simple binary Fan-In

// resultFanIn2 returns a channel to receive all to receive all from both `inp1` and `inp2` before close.
func resultFanIn2(inp1, inp2 <-chan result) (out <-chan result) {
	cha := make(chan result)
	go fanIn2result(cha, inp1, inp2)
	return cha
}

/* not used - kept for reference only.
// fanin2result as seen in Go Concurrency Patterns
func fanin2result(out chan<- result, inp1, inp2 <-chan result) {
	for {
		select {
		case e := <-inp1:
			out <- e
		case e := <-inp2:
			out <- e
		}
	}
} */

func fanIn2result(out chan<- result, inp1, inp2 <-chan result) {
	defer close(out)

	var (
		closed bool   // we found a chan closed
		ok     bool   // did we read successfully?
		e      result // what we've read
	)

	for !closed {
		select {
		case e, ok = <-inp1:
			if ok {
				out <- e
			} else {
				inp1 = inp2   // swap inp2 into inp1
				closed = true // break out of the loop
			}
		case e, ok = <-inp2:
			if ok {
				out <- e
			} else {
				closed = true // break out of the loop				}
			}
		}
	}

	// inp1 might not be closed yet. Drain it.
	for e = range inp1 {
		out <- e
	}
}

// End of resultFanIn2 simple binary Fan-In
