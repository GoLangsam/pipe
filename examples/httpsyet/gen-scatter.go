// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package httpsyet

import "time"

// ===========================================================================
// Beg of ScatterSite

// ScatterSite returns a slice (of size = size) of channels
// one of which shall receive any inp before close.
func ScatterSite(inp <-chan site, size int) (outS [](<-chan site)) {
	chaS := make([]chan site, size)
	for i := 0; i < size; i++ {
		chaS[i] = make(chan site)
	}

	go scattersite(inp, chaS...)

	outS = make([]<-chan site, size)
	for i := 0; i < size; i++ {
		outS[i] = chaS[i] // convert `chan` to `<-chan`
	}

	return outS
}

// c scattersite(inp <-chan site, outS ...chan<- site) {
// Note: go does not convert the passed slice `[]chan site` to `[]chan<- site` automatically.
// So, we do neither here, as we are lazy (we just call an internal helper function).
func scattersite(inp <-chan site, outS ...chan site) {

	for i := range inp {
		for !trySendsite(i, outS...) {
			time.Sleep(time.Millisecond) // wait a little before retry
		} // !sent
	} // inp

	for o := range outS {
		close(outS[o])
	}
}

func trySendsite(inp site, outS ...chan site) bool {

	for o := range outS {

		select { // try to send
		case outS[o] <- inp:
			return true
		default:
			// keep trying
		}

	} // outS
	return false
}

// End of FanSiteOut
