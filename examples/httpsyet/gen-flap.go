// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package httpsyet

// ===========================================================================
// Beg of PipeSiteEnter/Leave - Flapdoors observed by a Waiter

// SiteWaiter - as implemented by `*sync.WaitGroup` -
// attends Flapdoors and keeps track of
// how many enter and how many leave.
//
// Use Your provided `*sync.WaitGroup.Wait()`
// to know when to close the facilities.
//
// Just make sure to have _all_ entrances and exits attended,
// and don't `wg.Wait()` before You've flooded the facilities.
type SiteWaiter interface {
	Add(delta int)
	Done()
	// Wait() // here no need
}

// Note: Name is generic in order to avoid multiple-declaration clashes.

// PipeSiteEnter returns a channel to receive
// all `inp`
// and registers throughput
// as arrival
// on the given `sync.WaitGroup`
// until close.
func PipeSiteEnter(inp <-chan site, wg SiteWaiter) (out <-chan site) {
	cha := make(chan site)
	go pipesiteEnter(cha, wg, inp)
	return cha
}

// PipeSiteLeave returns a channel to receive
// all `inp`
// and registers throughput
// as departure
// on the given `sync.WaitGroup`
// until close.
func PipeSiteLeave(inp <-chan site, wg SiteWaiter) (out <-chan site) {
	cha := make(chan site)
	go pipesiteLeave(cha, wg, inp)
	return cha
}

func pipesiteEnter(out chan<- site, wg SiteWaiter, inp <-chan site) {
	defer close(out)
	for i := range inp {
		wg.Add(1)
		out <- i
	}
}

func pipesiteLeave(out chan<- site, wg SiteWaiter, inp <-chan site) {
	defer close(out)
	for i := range inp {
		out <- i
		wg.Done()
	}
}

// TubeSiteEnter returns a closure around PipeSiteEnter (_, wg)
// registering throughput
// on the given `sync.WaitGroup`
// as arrival.
func TubeSiteEnter(wg SiteWaiter) (tube func(inp <-chan site) (out <-chan site)) {

	return func(inp <-chan site) (out <-chan site) {
		return PipeSiteEnter(inp, wg)
	}
}

// TubeSiteLeave returns a closure around PipeSiteLeave (_, wg)
// registering throughput
// on the given `sync.WaitGroup`
// as departure.
func TubeSiteLeave(wg SiteWaiter) (tube func(inp <-chan site) (out <-chan site)) {

	return func(inp <-chan site) (out <-chan site) {
		return PipeSiteLeave(inp, wg)
	}
}

// ===========================================================================
