// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pipe

// ===========================================================================
// Beg of ThingPipeDone

// ThingPipeDone returns a channel to receive every `inp` before close and a channel to signal this closing.
func (inp ThingFrom) ThingPipeDone() (out ThingFrom, done <-chan struct{}) {
	cha := make(chan Thing)
	doit := make(chan struct{})
	go inp.pipeThingDone(cha, doit)
	return cha, doit
}

func (inp ThingFrom) pipeThingDone(out ThingInto, done chan<- struct{}) {
	defer close(out)
	defer close(done)
	for i := range inp {
		out <- i
	}
	done <- struct{}{}
}

// End of ThingPipeDone
// ===========================================================================
