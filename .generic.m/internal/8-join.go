// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pipe

// ===========================================================================
// Beg of ThingJoin feedback back-feeders for circular networks

// ThingJoin sends inputs on the given out channel and returns a done channel to receive one signal when inp has been drained
func (out ThingInto) ThingJoin(inp ...Thing) (done <-chan struct{}) {
	sig := make(chan struct{})
	go out.joinThing(sig, inp...)
	return sig
}

func (out ThingInto) joinThing(done chan<- struct{}, inp ...Thing) {
	defer close(done)
	for i := range inp {
		out <- inp[i]
	}
	done <- struct{}{}
}

// ThingJoinSlice sends inputs on the given out channel and returns a done channel to receive one signal when inp has been drained
func (out ThingInto) ThingJoinSlice(inp ...[]Thing) (done <-chan struct{}) {
	sig := make(chan struct{})
	go out.joinThingSlice(sig, inp...)
	return sig
}

func (out ThingInto) joinThingSlice(done chan<- struct{}, inp ...[]Thing) {
	defer close(done)
	for i := range inp {
		for j := range inp[i] {
			out <- inp[i][j]
		}
	}
	done <- struct{}{}
}

// ThingJoinChan sends inputs on the given out channel and returns a done channel to receive one signal when inp has been drained
func (out ThingInto) ThingJoinChan(inp ThingFrom) (done <-chan struct{}) {
	sig := make(chan struct{})
	go out.joinThingChan(sig, inp)
	return sig
}

func (out ThingInto) joinThingChan(done chan<- struct{}, inp ThingFrom) {
	defer close(done)
	for i := range inp {
		out <- i
	}
	done <- struct{}{}
}

// End of ThingJoin feedback back-feeders for circular networks
// ===========================================================================
