// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pipe

// ===========================================================================
// Beg of ThingFan2 easy fan-in's

// ThingFan2 returns a channel to receive
// everything from `inp`
// as well as
// all inputs
// before close.
func (inp ThingFrom) ThingFan2(inps ...Thing) (out ThingFrom) {
	return inp.ThingFanIn2(ThingChan(inps...))
}

// ThingFan2Slice returns a channel to receive
// everything from `inp`
// as well as
// all inputs
// before close.
func (inp ThingFrom) ThingFan2Slice(inps ...[]Thing) (out ThingFrom) {
	return inp.ThingFanIn2(ThingChanSlice(inps...))
}

// ThingFan2Chan returns a channel to receive
// everything from `inp`
// as well as
// everything from `ori`
// before close.
// Note: ThingFan2Chan is nothing but ThingFanIn2
func (inp ThingFrom) ThingFan2Chan(ori ThingFrom) (out ThingFrom) {
	return inp.ThingFanIn2(ori)
}

// ThingFan2FuncNok returns a channel to receive
// everything from `inp`
// as well as
// all results of generator `gen`
// until `!ok`
// before close.
func (inp ThingFrom) ThingFan2FuncNok(ori ThingFrom, gen func() (Thing, bool)) (out ThingFrom) {
	return inp.ThingFanIn2(ThingChanFuncNok(gen))
}

// ThingFan2FuncErr returns a channel to receive
// everything from `inp`
// as well as
// all results of generator `gen`
// until `err != nil`
// before close.
func (inp ThingFrom) ThingFan2FuncErr(ori ThingFrom, gen func() (Thing, error)) (out ThingFrom) {
	return inp.ThingFanIn2(ThingChanFuncErr(gen))
}

// End of ThingFan2 easy fan-in's
// ===========================================================================
