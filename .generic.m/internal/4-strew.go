// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pipe

import "time"

// ===========================================================================
// Beg of ThingStrew - scatter them

// ThingStrew returns a slice (of size = size) of channels
// one of which shall receive each inp before close.
func (inp ThingFrom) ThingStrew(size int) (outS []ThingFrom) {
	chaS := make(map[chan Thing]struct{}, size)
	for i := 0; i < size; i++ {
		chaS[make(chan Thing)] = struct{}{}
	}

	go inp.strewThing(chaS)

	outS = make([]ThingFrom, size)
	i := 0
	for c := range chaS {
		outS[i] = (ThingFrom)(c) // convert `chan Thing` to ThingFrom
		i++
	}

	return outS
}

// Note: go does not convert the passed slice `[]chan Thing` to `[]ThingFrom` automatically.
// So, we do neither here, as we are lazy (we just call an internal helper function).
func (inp ThingFrom) strewThing(outS map[chan Thing]struct{}) {

	for i := range inp {
		for !inp.trySendThing(i, outS) {
			time.Sleep(time.Millisecond * 10) // wait a little before retry
		} // !sent
	} // inp

	for o := range outS {
		close(o)
	}
}

func (static ThingFrom) trySendThing(inp Thing, outS map[chan Thing]struct{}) bool {

	for o := range outS {

		select { // try to send
		case o <- inp:
			return true
		default:
			// keep trying
		}

	} // outS
	return false
}

// End of ThingStrew - scatter them
// ===========================================================================
