// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pipe

// ===========================================================================
// Beg of ThingPipeEnter/Leave - Flapdoors observed by a Waiter

// ThingWaiter - as implemented by `*sync.WaitGroup` -
// attends Flapdoors and keeps counting
// who enters and who leaves.
//
// Use ThingDoneWait to learn about
// when the facilities are closed.
//
// Note: You may also use Your provided `*sync.WaitGroup.Wait()`
// to know when to close the facilities.
// Just: ThingDoneWait is more convenient
// as it also closes the primary channel for You.
//
// Just make sure to have _all_ entrances and exits attended,
// and `Wait()` only *after* You've started flooding the facilities.
type ThingWaiter interface {
	Add(delta int)
	Done()
	Wait()
}

// Note: The name is intentionally generic in order to avoid eventual multiple-declaration clashes.

// ThingPipeEnter returns a channel to receive
// all `inp`
// and registers throughput
// as arrival
// on the given `sync.WaitGroup`
// until close.
func (inp ThingFrom) ThingPipeEnter(wg ThingWaiter) (out ThingFrom) {
	cha := make(chan Thing)
	go inp.pipeThingEnter(cha, wg)
	return cha
}

// ThingPipeLeave returns a channel to receive
// all `inp`
// and registers throughput
// as departure
// on the given `sync.WaitGroup`
// until close.
func (inp ThingFrom) ThingPipeLeave(wg ThingWaiter) (out ThingFrom) {
	cha := make(chan Thing)
	go inp.pipeThingLeave(cha, wg)
	return cha
}

// ThingDoneLeave returns a channel to receive
// one signal after
// all throughput on `inp`
// has been registered
// as departure
// on the given `sync.WaitGroup`
// before close.
func (inp ThingFrom) ThingDoneLeave(wg ThingWaiter) (done <-chan struct{}) {
	sig := make(chan struct{})
	go inp.doneThingLeave(sig, wg)
	return sig
}

func (inp ThingFrom) pipeThingEnter(out ThingInto, wg ThingWaiter) {
	defer close(out)
	for i := range inp {
		wg.Add(1)
		out <- i
	}
}

func (inp ThingFrom) pipeThingLeave(out ThingInto, wg ThingWaiter) {
	defer close(out)
	for i := range inp {
		out <- i
		wg.Done()
	}
}

func (inp ThingFrom) doneThingLeave(done chan<- struct{}, wg ThingWaiter) {
	defer close(done)
	for i := range inp {
		_ = i // discard
		wg.Done()
	}
	done <- struct{}{}
}

// ThingTubeEnter returns a closure around ThingPipeEnter (wg)
// registering throughput
// as arrival
// on the given `sync.WaitGroup`.
func (inp ThingFrom) ThingTubeEnter(wg ThingWaiter) (tube func(inp ThingFrom) (out ThingFrom)) {

	return func(inp ThingFrom) (out ThingFrom) {
		return inp.ThingPipeEnter(wg)
	}
}

// ThingTubeLeave returns a closure around ThingPipeLeave (wg)
// registering throughput
// as departure
// on the given `sync.WaitGroup`.
func (inp ThingFrom) ThingTubeLeave(wg ThingWaiter) (tube func(inp ThingFrom) (out ThingFrom)) {

	return func(inp ThingFrom) (out ThingFrom) {
		return inp.ThingPipeLeave(wg)
	}
}

// ThingFiniLeave returns a closure around `ThingDoneLeave(wg)`
// registering throughput
// as departure
// on the given `sync.WaitGroup`.
func (inp ThingFrom) ThingFiniLeave(wg ThingWaiter) func(inp ThingFrom) (done <-chan struct{}) {

	return func(inp ThingFrom) (done <-chan struct{}) {
		return inp.ThingDoneLeave(wg)
	}
}

// ThingDoneWait returns a channel to receive
// one signal
// after wg.Wait() has returned and inp has been closed
// before close.
//
// Note: Use only *after* You've started flooding the facilities.
func (inp ThingInto) ThingDoneWait(wg ThingWaiter) (done <-chan struct{}) {
	cha := make(chan struct{})
	go inp.doneThingWait(cha, wg)
	return cha
}

func (inp ThingInto) doneThingWait(done chan<- struct{}, wg ThingWaiter) {
	defer close(done)
	wg.Wait()
	close(inp)
	done <- struct{}{} // not really needed - but looks better
}

// ThingFiniWait returns a closure around `DoneThingWait(wg)`.
func (inp ThingInto) ThingFiniWait(wg ThingWaiter) func(inp ThingInto) (done <-chan struct{}) {

	return func(inp ThingInto) (done <-chan struct{}) {
		return inp.ThingDoneWait(wg)
	}
}

// End of ThingPipeEnter/Leave - Flapdoors observed by a Waiter
// ===========================================================================
