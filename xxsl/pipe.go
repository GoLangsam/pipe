// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.

package pipe

import (
	"github.com/cheekybits/genny/generic"
)

// ===========================================================================
// Beg of anyThingChannel interface

// anyThingChannel represents a
// bidirectional
// channel of anyThing elements
type anyThingChannel interface {
	AnyChanCore // close, len & cap
	receiverAny // Receive / Get
	providerAny // Put
}

// Note: Embedding AnyReceiver and AnyPutr directly would result in error: duplicate method Len Cap Close

// AnyReceiver represents a
// receive-only
// channel of anyThing elements
// - aka `<-chan`
type AnyReceiver interface {
	AnyChanCore // close, len & cap
	receiverAny // Receive / Get
}

type receiverAny interface {
	Get() (data anyThing, isOpen bool) // the multi-valued comma-ok receive - aka `MyAny, ok := <-myreceiverAny`
}

// AnyPutr represents a
// send-enabled
// channel of anyThing elements
// - aka `chan<-`
type AnyPutr interface {
	AnyChanCore // close, len & cap
	providerAny // Put
}

type providerAny interface {
	Put(data anyThing) // the send method - aka `MyAnyproviderAny <- MyAny`
}

// AnyChanCore represents basic methods common to every
// channel of Any elements
type AnyChanCore interface {
	Close()
	Len() int
	Cap() int
}

// End of AnyChannel interface
// ===========================================================================

// anyThing is the generic type flowing thru the pipe network.
type anyThing generic.Type

// ===========================================================================
// Beg of anyDemand channel object

// anyDemand is a
// demand channel
type anyDemand struct {
	ch  chan anyThing
	req chan struct{}
}

// anyDemandMakeChan returns
// a (pointer to a) fresh
// unbuffered
// demand channel.
func anyDemandMakeChan() *anyDemand {
	d := anyDemand{
		ch:  make(chan anyThing),
		req: make(chan struct{}),
	}
	return &d
}

// anyDemandMakeBuff returns
// a (pointer to a) fresh
// buffered (with capacity=`cap`)
// demand channel.
func anyDemandMakeBuff(cap int) *anyDemand {
	d := anyDemand{
		ch:  make(chan anyThing, cap),
		req: make(chan struct{}),
	}
	return &d
}

// ---------------------------------------------------------------------------

// Get is the comma-ok multi-valued form to receive from the channel and
// reports whether a received value was sent before the channel was closed.
//
// Get blocks until the request is accepted and value `val` has been received from `from`.
func (from *anyDemand) Get() (val anyThing, open bool) {
	from.req <- struct{}{}
	val, open = <-from.ch
	return
}

// From returns the handshaking channels
// (for use in `select` statements)
// to receive values:
//  `req` to send a request `req <- struct{}{}` and
//  `rcv` to reveive such requested value from.
func (from *anyDemand) From() (req chan<- struct{}, rcv <-chan anyThing) {
	return from.req, from.ch
}

// ---------------------------------------------------------------------------

// Put is the send-upon-request method
// - aka "myAnyChan <- myAny".
//
// Put blocks until requsted to send value `val` into `into`.
func (into *anyDemand) Put(val anyThing) {
	<-into.req
	into.ch <- val
}

// Into returns the handshaking channels
// (for use in `select` statements)
// to send values:
//  `req` to receive a request `<-req` and
//  `snd` to send such requested value into.
func (into *anyDemand) Into() (req <-chan struct{}, snd chan<- anyThing) {
	return into.req, into.ch
}

// Close is to be called by a producer when finished sending.
// The value channel is closed in order to broadcast this.
func (into *anyDemand) Close() {
	close(into.ch)
}

// ---------------------------------------------------------------------------

// Cap reports the capacity of the underlying value channel.
func (c *anyDemand) Cap() int {
	return cap(c.ch)
}

// Len reports the length of the underlying value channel.
func (c *anyDemand) Len() int {
	return len(c.ch)
}

// End of anyDemand channel object
// ===========================================================================

// ===========================================================================
// Beg of anySupply channel object

// anySupply is a
// supply channel
type anySupply struct {
	ch chan anyThing
	//  chan struct{}
}

// anySupplyMakeChan returns
// a (pointer to a) fresh
// unbuffered
// supply channel.
func anySupplyMakeChan() *anySupply {
	d := anySupply{
		ch: make(chan anyThing),
		// : make(chan struct{}),
	}
	return &d
}

// anySupplyMakeBuff returns
// a (pointer to a) fresh
// buffered (with capacity=`cap`)
// supply channel.
func anySupplyMakeBuff(cap int) *anySupply {
	d := anySupply{
		ch: make(chan anyThing, cap),
		// : make(chan struct{}),
	}
	return &d
}

// ---------------------------------------------------------------------------

// Get is the comma-ok multi-valued form to receive from the channel and
// reports whether a received value was sent before the channel was closed.
//
// Get blocks until the request is accepted and value `val` has been received from `from`.
func (from *anySupply) Get() (val anyThing, open bool) {
	// m.req <- struct{}{}
	val, open = <-from.ch
	return
}

// ---------------------------------------------------------------------------

// Put is the send-upon-request method
// - aka "myAnyChan <- myAny".
//
// Put blocks until requsted to send value `val` into `into`.
func (into *anySupply) Put(val anyThing) {
	// nto.req
	into.ch <- val
}

// Close is to be called by a producer when finished sending.
// The value channel is closed in order to broadcast this.
func (into *anySupply) Close() {
	close(into.ch)
}

// ---------------------------------------------------------------------------

// Cap reports the capacity of the underlying value channel.
func (c *anySupply) Cap() int {
	return cap(c.ch)
}

// Len reports the length of the underlying value channel.
func (c *anySupply) Len() int {
	return len(c.ch)
}

// End of anySupply channel object
// ===========================================================================

// ===========================================================================
// Beg of anyThingChannelMake creators

// anyThingChannelMakeChan returns a new open channel
// (simply a 'chan anyThing' that is).
//  Note: No 'anyThing-producer' is launched here yet! (as is in all the other functions).
//  This is useful to easily create corresponding variables such as:
/*
   var myanyThingPipelineStartsHere := anyThingChannelMakeChan()
   // ... lot's of code to design and build Your favourite "myanyThingWorkflowPipeline"
   // ...
   // ... *before* You start pouring data into it, e.g. simply via:
   for drop := range water {
       myanyThingPipelineStartsHere <- drop
   }
   close(myanyThingPipelineStartsHere)
*/
//  Hint: especially helpful, if Your piping library operates on some hidden (non-exported) type
//  (or on a type imported from elsewhere - and You don't want/need or should(!) have to care.)
//
//  Note: as always (except for anyThingPipeBuffer) the channel is unbuffered.
//
func anyThingChannelMakeChan() (out anyThingChannel) {
	return &anySupply{make(chan anyThing)}
}

// anyThingChannelMakeBuff returns a new open buffered channel with capacity `cap`.
func anyThingChannelMakeBuff(cap int) (out anyThingChannel) {
	return &anySupply{make(chan anyThing, cap)}
}

// End of anyThingChannelMake creators
// ===========================================================================

// ===========================================================================
// Beg of anyThingChan producers

// anyThingChan returns a channel to receive
// all inputs
// before close.
func anyThingChan(inp ...anyThing) (out anyThingChannel) {
	cha := anyThingChannelMakeChan()
	go chananyThing(cha, inp...)
	return cha
}

func chananyThing(out anyThingChannel, inp ...anyThing) {
	defer out.Close()
	for i := range inp {
		out.Put(inp[i])
	}
}

// anyThingChanSlice returns a channel to receive
// all inputs
// before close.
func anyThingChanSlice(inp ...[]anyThing) (out anyThingChannel) {
	cha := anyThingChannelMakeChan()
	go chananyThingSlice(cha, inp...)
	return cha
}

func chananyThingSlice(out anyThingChannel, inp ...[]anyThing) {
	defer out.Close()
	for i := range inp {
		for j := range inp[i] {
			out.Put(inp[i][j])
		}
	}
}

// anyThingChanFuncNok returns a channel to receive
// all results of generator `gen`
// until `!ok`
// before close.
func anyThingChanFuncNok(gen func() (anyThing, bool)) (out anyThingChannel) {
	cha := anyThingChannelMakeChan()
	go chananyThingFuncNok(cha, gen)
	return cha
}

func chananyThingFuncNok(out anyThingChannel, gen func() (anyThing, bool)) {
	defer out.Close()
	for {
		res, ok := gen() // generate
		if !ok {
			return
		}
		out.Put(res)
	}
}

// anyThingChanFuncErr returns a channel to receive
// all results of generator `gen`
// until `err != nil`
// before close.
func anyThingChanFuncErr(gen func() (anyThing, error)) (out anyThingChannel) {
	cha := anyThingChannelMakeChan()
	go chananyThingFuncErr(cha, gen)
	return cha
}

func chananyThingFuncErr(out anyThingChannel, gen func() (anyThing, error)) {
	defer out.Close()
	for {
		res, err := gen() // generate
		if err != nil {
			return
		}
		out.Put(res)
	}
}

// End of anyThingChan producers
// ===========================================================================

// ===========================================================================
// Beg of anyThingPipe functions

// anyThingPipe
// will apply every `op` to every `inp` and
// returns a channel to receive
// each `inp`
// before close.
//
// Note: For functional people,
// this 'could' be named `anyThingMap`.
// Just: 'map' has a very different meaning in go lang.
func anyThingPipe(inp anyThingChannel, ops ...func(a anyThing)) (out anyThingChannel) {
	cha := anyThingChannelMakeChan()
	go pipeanyThing(cha, inp, ops...)
	return cha
}

func pipeanyThing(out anyThingChannel, inp anyThingChannel, ops ...func(a anyThing)) {
	defer out.Close()
	for i, ok := inp.Get(); ok; i, ok = inp.Get() {
		for _, op := range ops {
			if op != nil {
				op(i) // chain action
			}
		}
		out.Put(i) // send it
	}
}

// anyThingPipeFunc
// will chain every `act` to every `inp` and
// returns a channel to receive
// each result
// before close.
func anyThingPipeFunc(inp anyThingChannel, acts ...func(a anyThing) anyThing) (out anyThingChannel) {
	cha := anyThingChannelMakeChan()
	go pipeanyThingFunc(cha, inp, acts...)
	return cha
}

func pipeanyThingFunc(out anyThingChannel, inp anyThingChannel, acts ...func(a anyThing) anyThing) {
	defer out.Close()
	for i, ok := inp.Get(); ok; i, ok = inp.Get() {
		for _, act := range acts {
			if act != nil {
				i = act(i) // chain action
			}
		}
		out.Put(i) // send result
	}
}

// End of anyThingPipe functions
// ===========================================================================

// ===========================================================================
// Beg of anyThingTube closures around anyThingPipe

// anyThingTube returns a closure around PipeanyThing (_, ops...).
func anyThingTube(ops ...func(a anyThing)) (tube func(inp anyThingChannel) (out anyThingChannel)) {

	return func(inp anyThingChannel) (out anyThingChannel) {
		return anyThingPipe(inp, ops...)
	}
}

// anyThingTubeFunc returns a closure around PipeanyThingFunc (_, acts...).
func anyThingTubeFunc(acts ...func(a anyThing) anyThing) (tube func(inp anyThingChannel) (out anyThingChannel)) {

	return func(inp anyThingChannel) (out anyThingChannel) {
		return anyThingPipeFunc(inp, acts...)
	}
}

// End of anyThingTube closures around anyThingPipe
// ===========================================================================

// ===========================================================================
// Beg of anyThingDone terminators

// anyThingDone
// will apply every `op` to every `inp` and
// returns a channel to receive
// one signal
// upon close.
func anyThingDone(inp anyThingChannel, ops ...func(a anyThing)) (done <-chan struct{}) {
	sig := make(chan struct{})
	go doneanyThing(sig, inp, ops...)
	return sig
}

func doneanyThing(done chan<- struct{}, inp anyThingChannel, ops ...func(a anyThing)) {
	defer close(done)
	for i, ok := inp.Get(); ok; i, ok = inp.Get() {
		for _, op := range ops {
			if op != nil {
				op(i) // apply operation
			}
		}
	}
	done <- struct{}{}
}

// anyThingDoneFunc
// will chain every `act` to every `inp` and
// returns a channel to receive
// one signal
// upon close.
func anyThingDoneFunc(inp anyThingChannel, acts ...func(a anyThing) anyThing) (done <-chan struct{}) {
	sig := make(chan struct{})
	go doneanyThingFunc(sig, inp, acts...)
	return sig
}

func doneanyThingFunc(done chan<- struct{}, inp anyThingChannel, acts ...func(a anyThing) anyThing) {
	defer close(done)
	for i, ok := inp.Get(); ok; i, ok = inp.Get() {
		for _, act := range acts {
			if act != nil {
				i = act(i) // chain action
			}
		}
	}
	done <- struct{}{}
}

// anyThingDoneSlice returns a channel to receive
// a slice with every anyThing received on `inp`
// upon close.
//
//  Note: Unlike anyThingDone, anyThingDoneSlice sends the fully accumulated slice, not just an event, once upon close of inp.
func anyThingDoneSlice(inp anyThingChannel) (done <-chan []anyThing) {
	sig := make(chan []anyThing)
	go doneanyThingSlice(sig, inp)
	return sig
}

func doneanyThingSlice(done chan<- []anyThing, inp anyThingChannel) {
	defer close(done)
	slice := []anyThing{}
	for i, ok := inp.Get(); ok; i, ok = inp.Get() {
		slice = append(slice, i)
	}
	done <- slice
}

// End of anyThingDone terminators
// ===========================================================================

// ===========================================================================
// Beg of anyThingFini closures

// anyThingFini returns a closure around `anyThingDone(_, ops...)`.
func anyThingFini(ops ...func(a anyThing)) func(inp anyThingChannel) (done <-chan struct{}) {

	return func(inp anyThingChannel) (done <-chan struct{}) {
		return anyThingDone(inp, ops...)
	}
}

// anyThingFiniFunc returns a closure around `anyThingDoneFunc(_, acts...)`.
func anyThingFiniFunc(acts ...func(a anyThing) anyThing) func(inp anyThingChannel) (done <-chan struct{}) {

	return func(inp anyThingChannel) (done <-chan struct{}) {
		return anyThingDoneFunc(inp, acts...)
	}
}

// anyThingFiniSlice returns a closure around `anyThingDoneSlice(_)`.
func anyThingFiniSlice() func(inp anyThingChannel) (done <-chan []anyThing) {

	return func(inp anyThingChannel) (done <-chan []anyThing) {
		return anyThingDoneSlice(inp)
	}
}

// End of anyThingFini closures
// ===========================================================================

// ===========================================================================
// Beg of anyThingPair functions

// anyThingPair returns a pair of channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func anyThingPair(inp anyThingChannel) (out1, out2 anyThingChannel) {
	cha1 := anyThingChannelMakeChan()
	cha2 := anyThingChannelMakeChan()
	go pairanyThing(cha1, cha2, inp)
	return cha1, cha2
}

func pairanyThing(out1, out2 anyThingChannel, inp anyThingChannel) {
	defer out1.Close()
	defer out2.Close()
	for i, ok := inp.Get(); ok; i, ok = inp.Get() {
		out1.Put(i)
		out2.Put(i)
	}
}

// End of anyThingPair functions
// ===========================================================================
