// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.

package pipe

import (
	"github.com/cheekybits/genny/generic"
)

// ===========================================================================
// Beg of AnyChannel interface

// AnyChannel represents a
// bidirectional
// channel of Any elements
type AnyChannel interface {
	AnyChanCore // close, len & cap
	receiverAny // Receive / Request
	providerAny // Provide
}

// Note: Embedding AnyReceiver and AnyProvider directly would result in error: duplicate method Len Cap Close

// AnyReceiver represents a
// receive-only
// channel of Any elements
// - aka `<-chan`
type AnyReceiver interface {
	AnyChanCore // close, len & cap
	receiverAny // Receive / Request
}

type receiverAny interface {
	Receive() (data Any)              // the receive operator as method - aka `MyAny := <-myreceiverAny`
	Request() (data Any, isOpen bool) // the multi-valued comma-ok receive - aka `MyAny, ok := <-myreceiverAny`
}

// AnyProvider represents a
// send-enabled
// channel of Any elements
// - aka `chan<-`
type AnyProvider interface {
	AnyChanCore // close, len & cap
	providerAny // Provide
}

type providerAny interface {
	Provide(data Any) // the send method - aka `MyAnyproviderAny <- MyAny`
}

// AnyChanCore represents basic methods common to every
// channel of Any elements
type AnyChanCore interface {
	Close()
	Len() int
	Cap() int
}

// End of AnyChannel interface
// ===========================================================================

type Any generic.Type

// ===========================================================================
// Beg of AnyDemand channel object

// AnyDemand is a
// demand channel
type AnyDemand struct {
	dat chan Any
	req chan struct{}
}

// MakeAnyDemandChan returns
// a (pointer to a) fresh
// unbuffered
// demand channel
func MakeAnyDemandChan() *AnyDemand {
	d := AnyDemand{
		dat: make(chan Any),
		req: make(chan struct{}),
	}
	return &d
}

// MakeAnyDemandBuff returns
// a (pointer to a) fresh
// buffered (with capacity=`cap`)
// demand channel
func MakeAnyDemandBuff(cap int) *AnyDemand {
	d := AnyDemand{
		dat: make(chan Any, cap),
		req: make(chan struct{}),
	}
	return &d
}

// Provide is the send method
// - aka "myAnyChan <- myAny"
func (c *AnyDemand) Provide(dat Any) {
	<-c.req
	c.dat <- dat
}

// Receive is the receive operator as method
// - aka "myAny := <-myAnyChan"
func (c *AnyDemand) Receive() (dat Any) {
	c.req <- struct{}{}
	return <-c.dat
}

// Request is the comma-ok multi-valued form of Receive and
// reports whether a received value was sent before the Any channel was closed
func (c *AnyDemand) Request() (dat Any, open bool) {
	c.req <- struct{}{}
	dat, open = <-c.dat
	return dat, open
}

// Close closes the underlying Any channel
func (c *AnyDemand) Close() {
	close(c.dat)
}

// Cap reports the capacity of the underlying Any channel
func (c *AnyDemand) Cap() int {
	return cap(c.dat)
}

// Len reports the length of the underlying Any channel
func (c *AnyDemand) Len() int {
	return len(c.dat)
}

// End of AnyDemand channel object
// ===========================================================================

// ===========================================================================
// Beg of AnySupply channel object

// AnySupply is a
// supply channel
type AnySupply struct {
	dat chan Any
	//  chan struct{}
}

// MakeAnySupplyChan returns
// a (pointer to a) fresh
// unbuffered
// supply channel
func MakeAnySupplyChan() *AnySupply {
	d := AnySupply{
		dat: make(chan Any),
		// : make(chan struct{}),
	}
	return &d
}

// MakeAnySupplyBuff returns
// a (pointer to a) fresh
// buffered (with capacity=`cap`)
// supply channel
func MakeAnySupplyBuff(cap int) *AnySupply {
	d := AnySupply{
		dat: make(chan Any, cap),
		// : make(chan struct{}),
	}
	return &d
}

// Provide is the send method
// - aka "myAnyChan <- myAny"
func (c *AnySupply) Provide(dat Any) {
	// .req
	c.dat <- dat
}

// Receive is the receive operator as method
// - aka "myAny := <-myAnyChan"
func (c *AnySupply) Receive() (dat Any) {
	// eq <- struct{}{}
	return <-c.dat
}

// Request is the comma-ok multi-valued form of Receive and
// reports whether a received value was sent before the Any channel was closed
func (c *AnySupply) Request() (dat Any, open bool) {
	// eq <- struct{}{}
	dat, open = <-c.dat
	return dat, open
}

// Close closes the underlying Any channel
func (c *AnySupply) Close() {
	close(c.dat)
}

// Cap reports the capacity of the underlying Any channel
func (c *AnySupply) Cap() int {
	return cap(c.dat)
}

// Len reports the length of the underlying Any channel
func (c *AnySupply) Len() int {
	return len(c.dat)
}

// End of AnySupply channel object
// ===========================================================================

// ===========================================================================
// Beg of MakeAny creators

// MakeAnyChannelChan returns a new open channel
// (simply a 'chan Any' that is).
//  Note: No 'Any-producer' is launched here yet! (as is in all the other functions).
//  This is useful to easily create corresponding variables such as:
/*
   var myAnyPipelineStartsHere := MakeAnyChan()
   // ... lot's of code to design and build Your favourite "myAnyWorkflowPipeline"
   // ...
   // ... *before* You start pouring data into it, e.g. simply via:
   for drop := range water {
       myAnyPipelineStartsHere <- drop
   }
   close(myAnyPipelineStartsHere)
*/
//  Hint: especially helpful, if Your piping library operates on some hidden (non-exported) type
//  (or on a type imported from elsewhere - and You don't want/need or should(!) have to care.)
//
//  Note: as always (except for PipeAnyBuffer) the channel is unbuffered.
//
func MakeAnyChannelChan() (out AnyChannel) {
	return &AnySupply{make(chan Any)}
}

// MakeAnyChannelBuff returns a new open buffered channel with capacity `cap`.
func MakeAnyChannelBuff(cap int) (out AnyChannel) {
	return &AnySupply{make(chan Any, cap)}
}

// End of MakeAny creators
// ===========================================================================

// ===========================================================================
// Beg of ChanAny producers

// ChanAny returns a channel to receive
// all inputs
// before close.
func ChanAny(inp ...Any) (out AnyChannel) {
	cha := MakeAnyChannelChan()
	go chanAny(cha, inp...)
	return cha
}

func chanAny(out AnyChannel, inp ...Any) {
	defer out.Close()
	for i := range inp {
		out.Provide(inp[i])
	}
}

// ChanAnySlice returns a channel to receive
// all inputs
// before close.
func ChanAnySlice(inp ...[]Any) (out AnyChannel) {
	cha := MakeAnyChannelChan()
	go chanAnySlice(cha, inp...)
	return cha
}

func chanAnySlice(out AnyChannel, inp ...[]Any) {
	defer out.Close()
	for i := range inp {
		for j := range inp[i] {
			out.Provide(inp[i][j])
		}
	}
}

// ChanAnyFuncNok returns a channel to receive
// all results of generator `gen`
// until `!ok`
// before close.
func ChanAnyFuncNok(gen func() (Any, bool)) (out AnyChannel) {
	cha := MakeAnyChannelChan()
	go chanAnyFuncNok(cha, gen)
	return cha
}

func chanAnyFuncNok(out AnyChannel, gen func() (Any, bool)) {
	defer out.Close()
	for {
		res, ok := gen() // generate
		if !ok {
			return
		}
		out.Provide(res)
	}
}

// ChanAnyFuncErr returns a channel to receive
// all results of generator `gen`
// until `err != nil`
// before close.
func ChanAnyFuncErr(gen func() (Any, error)) (out AnyChannel) {
	cha := MakeAnyChannelChan()
	go chanAnyFuncErr(cha, gen)
	return cha
}

func chanAnyFuncErr(out AnyChannel, gen func() (Any, error)) {
	defer out.Close()
	for {
		res, err := gen() // generate
		if err != nil {
			return
		}
		out.Provide(res)
	}
}

// End of ChanAny producers
// ===========================================================================

// ===========================================================================
// Beg of PipeAny functions

// PipeAnyFunc returns a channel to receive
// every result of action `act` applied to `inp`
// before close.
// Note: it 'could' be PipeAnyMap for functional people,
// but 'map' has a very different meaning in go lang.
func PipeAnyFunc(inp AnyChannel, act func(a Any) Any) (out AnyChannel) {
	cha := MakeAnyChannelChan()
	if act == nil {
		act = func(a Any) Any { return a }
	}
	go pipeAnyFunc(cha, inp, act)
	return cha
}

func pipeAnyFunc(out AnyChannel, inp AnyChannel, act func(a Any) Any) {
	defer out.Close()
	for i, ok := inp.Request(); ok; i, ok = inp.Request() {
		out.Provide(act(i))
	}
}

// PipeAnyBuffer returns a buffered channel with capacity `cap` to receive
// all `inp`
// before close.
func PipeAnyBuffer(inp AnyChannel, cap int) (out AnyChannel) {
	cha := MakeAnyChannelBuff(cap)
	go pipeAnyBuffer(cha, inp)
	return cha
}

func pipeAnyBuffer(out AnyChannel, inp AnyChannel) {
	defer out.Close()
	for i, ok := inp.Request(); ok; i, ok = inp.Request() {
		out.Provide(i)
	}
}

// End of PipeAny functions
// ===========================================================================

// ===========================================================================
// Beg of TubeAny closures

// TubeAnyFunc returns a closure around PipeAnyFunc (_, act).
func TubeAnyFunc(act func(a Any) Any) (tube func(inp AnyChannel) (out AnyChannel)) {

	return func(inp AnyChannel) (out AnyChannel) {
		return PipeAnyFunc(inp, act)
	}
}

// TubeAnyBuffer returns a closure around PipeAnyBuffer (_, cap).
func TubeAnyBuffer(cap int) (tube func(inp AnyChannel) (out AnyChannel)) {

	return func(inp AnyChannel) (out AnyChannel) {
		return PipeAnyBuffer(inp, cap)
	}
}

// End of TubeAny closures
// ===========================================================================

// ===========================================================================
// Beg of DoneAny terminators

// DoneAny returns a channel to receive
// one signal before close after `inp` has been drained.
func DoneAny(inp AnyChannel) (done <-chan struct{}) {
	sig := make(chan struct{})
	go doitAny(sig, inp)
	return sig
}

func doitAny(done chan<- struct{}, inp AnyChannel) {
	defer close(done)
	for i, ok := inp.Request(); ok; i, ok = inp.Request() {
		_ = i // Drain inp
	}
	done <- struct{}{}
}

// DoneAnySlice returns a channel to receive
// a slice with every Any received on `inp`
// before close.
//
//  Note: Unlike DoneAny, DoneAnySlice sends the fully accumulated slice, not just an event, once upon close of inp.
func DoneAnySlice(inp AnyChannel) (done <-chan []Any) {
	sig := make(chan []Any)
	go doitAnySlice(sig, inp)
	return sig
}

func doitAnySlice(done chan<- []Any, inp AnyChannel) {
	defer close(done)
	slice := []Any{}
	for i, ok := inp.Request(); ok; i, ok = inp.Request() {
		slice = append(slice, i)
	}
	done <- slice
}

// DoneAnyFunc returns a channel to receive
// one signal after `act` has been applied to every `inp`
// before close.
func DoneAnyFunc(inp AnyChannel, act func(a Any)) (done <-chan struct{}) {
	sig := make(chan struct{})
	if act == nil {
		act = func(a Any) { return }
	}
	go doitAnyFunc(sig, inp, act)
	return sig
}

func doitAnyFunc(done chan<- struct{}, inp AnyChannel, act func(a Any)) {
	defer close(done)
	for i, ok := inp.Request(); ok; i, ok = inp.Request() {
		act(i) // apply action
	}
	done <- struct{}{}
}

// End of DoneAny terminators
// ===========================================================================

// ===========================================================================
// Beg of FiniAny closures

// FiniAny returns a closure around `DoneAny(_)`.
func FiniAny() func(inp AnyChannel) (done <-chan struct{}) {

	return func(inp AnyChannel) (done <-chan struct{}) {
		return DoneAny(inp)
	}
}

// FiniAnySlice returns a closure around `DoneAnySlice(_)`.
func FiniAnySlice() func(inp AnyChannel) (done <-chan []Any) {

	return func(inp AnyChannel) (done <-chan []Any) {
		return DoneAnySlice(inp)
	}
}

// FiniAnyFunc returns a closure around `DoneAnyFunc(_, act)`.
func FiniAnyFunc(act func(a Any)) func(inp AnyChannel) (done <-chan struct{}) {

	return func(inp AnyChannel) (done <-chan struct{}) {
		return DoneAnyFunc(inp, act)
	}
}

// End of FiniAny closures
// ===========================================================================

// ===========================================================================
// Beg of PairAny functions

// PairAny returns a pair of channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func PairAny(inp AnyChannel) (out1, out2 AnyChannel) {
	cha1 := MakeAnyChannelChan()
	cha2 := MakeAnyChannelChan()
	go pairAny(cha1, cha2, inp)
	return cha1, cha2
}

func pairAny(out1, out2 AnyChannel, inp AnyChannel) {
	defer out1.Close()
	defer out2.Close()
	for i, ok := inp.Request(); ok; i, ok = inp.Request() {
		out1.Provide(i)
		out2.Provide(i)
	}
}

// End of PairAny functions
// ===========================================================================
