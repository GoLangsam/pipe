// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.

package pipe

import (
	"github.com/cheekybits/genny/generic"
)

type Any generic.Type

// ===========================================================================
// Beg of MakeAny creators

// MakeAnyChan returns a new open channel
// (simply a 'chan Any' that is).
//  Note: No 'Any-producer' is launched here yet! (as is in all the other functions).
//  This is useful to easily create corresponding variables such as:
/*
   var myAnyPipelineStartsHere := MakeAnyChan()
   // ... lot's of code to design and build Your favourite "myAnyWorkflowPipeline"
   // ...
   // ... *before* You start pouring data into it, e.g. simply via:
   for drop := range water {
       myAnyPipelineStartsHere <- drop
   }
   close(myAnyPipelineStartsHere)
*/
//  Hint: especially helpful, if Your piping library operates on some hidden (non-exported) type
//  (or on a type imported from elsewhere - and You don't want/need or should(!) have to care.)
//
//  Note: as always (except for PipeAnyBuffer) the channel is unbuffered.
//
func MakeAnyChan() chan Any {
	return make(chan Any)
}

// End of MakeAny creators
// ===========================================================================

// ===========================================================================
// Beg of ChanAny producers

// ChanAny returns a channel to receive
// all inputs
// before close.
func ChanAny(inp ...Any) chan Any {
	out := make(chan Any)
	go func() {
		defer close(out)
		for i := range inp {
			out <- inp[i]
		}
	}()
	return out
}

// ChanAnySlice returns a channel to receive
// all inputs
// before close.
func ChanAnySlice(inp ...[]Any) chan Any {
	out := make(chan Any)
	go func() {
		defer close(out)
		for i := range inp {
			for j := range inp[i] {
				out <- inp[i][j]
			}
		}
	}()
	return out
}

// ChanAnyFuncNok returns a channel to receive
// all results of generator `gen`
// until `!ok`
// before close.
func ChanAnyFuncNok(gen func() (Any, bool)) chan Any {
	out := make(chan Any)
	go func() {
		defer close(out)
		for {
			res, ok := gen() // generate
			if !ok {
				return
			}
			out <- res
		}
	}()
	return out
}

// ChanAnyFuncErr returns a channel to receive
// all results of generator `gen`
// until `err != nil`
// before close.
func ChanAnyFuncErr(gen func() (Any, error)) chan Any {
	out := make(chan Any)
	go func() {
		defer close(out)
		for {
			res, err := gen() // generate
			if err != nil {
				return
			}
			out <- res
		}
	}()
	return out
}

// End of ChanAny producers
// ===========================================================================

// ===========================================================================
// Beg of PipeAny functions

// PipeAnyFunc returns a channel to receive
// every result of action `act` applied to `inp`
// before close.
//  Note: it 'could' be PipeAnyMap for functional people,
//  but 'map' has a very different meaning in go lang.
func PipeAnyFunc(inp chan Any, act func(a Any) Any) chan Any {
	out := make(chan Any)
	if act == nil { // Make `nil` value useful
		act = func(a Any) Any { return a }
	}
	go func() {
		defer close(out)
		for i := range inp {
			out <- act(i) // apply action
		}
	}()
	return out
}

// PipeAnyBuffer returns a buffered channel with capacity `cap` to receive
// all `inp`
// before close.
func PipeAnyBuffer(inp chan Any, cap int) chan Any {
	out := make(chan Any, cap)
	go func() {
		defer close(out)
		for i := range inp {
			out <- i
		}
	}()
	return out
}

// End of PipeAny functions
// ===========================================================================

// ===========================================================================
// Beg of TubeAny closures

// TubeAnyFunc returns a closure around `PipeAnyFunc(_, act)`.
func TubeAnyFunc(act func(a Any) Any) func(chan Any) chan Any {

	return func(inp chan Any) chan Any {
		return PipeAnyFunc(inp, act)
	}
}

// TubeAnyBuffer returns a closure around `PipeAnyBuffer(_, cap)`.
func TubeAnyBuffer(cap int) func(chan Any) chan Any {

	return func(inp chan Any) chan Any {
		return PipeAnyBuffer(inp, cap)
	}
}

// End of TubeAny closures
// ===========================================================================

// ===========================================================================
// Beg of DoneAny terminators

// DoneAny returns a channel to receive
// one signal before close after `inp` has been drained.
func DoneAny(inp chan Any) chan struct{} {
	done := make(chan struct{})
	go func() {
		defer close(done)
		for i := range inp {
			_ = i // drain inp
		}
		done <- struct{}{}
	}()
	return done
}

// DoneAnySlice returns a channel to receive
// a slice with every Any received on `inp`
// before close.
//
//  Note: Unlike DoneAny, DoneAnySlice sends the fully accumulated slice, not just an event, once upon close of inp.
func DoneAnySlice(inp chan Any) chan []Any {
	done := make(chan []Any)
	go func() {
		defer close(done)
		slice := []Any{}
		for i := range inp {
			slice = append(slice, i)
		}
		done <- slice
	}()
	return done
}

// DoneAnyFunc returns a channel to receive
// one signal after `act` has been applied to every `inp`
// before close.
func DoneAnyFunc(inp chan Any, act func(a Any)) chan struct{} {
	done := make(chan struct{})
	if act == nil {
		act = func(a Any) { return }
	}
	go func() {
		defer close(done)
		for i := range inp {
			act(i) // apply action
		}
		done <- struct{}{}
	}()
	return done
}

// End of DoneAny terminators
// ===========================================================================

// ===========================================================================
// Beg of FiniAny closures

// FiniAny returns a closure around `DoneAny(_)`.
func FiniAny() func(chan Any) chan struct{} {

	return func(inp chan Any) chan struct{} {
		return DoneAny(inp)
	}
}

// FiniAnySlice returns a closure around `DoneAnySlice(_)`.
func FiniAnySlice() func(chan Any) chan []Any {

	return func(inp chan Any) chan []Any {
		return DoneAnySlice(inp)
	}
}

// FiniAnyFunc returns a closure around `DoneAnyFunc(_, act)`.
func FiniAnyFunc(act func(a Any)) func(chan Any) chan struct{} {

	return func(inp chan Any) chan struct{} {
		return DoneAnyFunc(inp, act)
	}
}

// End of FiniAny closures
// ===========================================================================

// ===========================================================================
// Beg of PairAny functions

// PairAny returns a pair of channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func PairAny(inp chan Any) (chan Any, chan Any) {
	out1 := make(chan Any)
	out2 := make(chan Any)
	go func() {
		defer close(out1)
		defer close(out2)
		for i := range inp {
			out1 <- i
			out2 <- i
		}
	}()
	return out1, out2
}

// End of PairAny functions
// ===========================================================================

// ===========================================================================
// Beg of ForkAny functions

// ForkAny returns two channels
// either of which is to receive
// every result of inp
// before close.
func ForkAny(inp chan Any) (chan Any, chan Any) {
	out1 := make(chan Any)
	out2 := make(chan Any)
	go func() {
		defer close(out1)
		defer close(out2)
		for i := range inp {
			select { // send to whomever is ready to receive
			case out1 <- i:
			case out2 <- i:
			}
		}
	}()
	return out1, out2
}

// End of ForkAny functions
// ===========================================================================

// ===========================================================================

// FanIn2Any as seen in Go Concurrency Patterns
//
// Warning: For instruction and teaching only!
// Do not use in any serious project, as
// it hangs forever upon close of both inputs.
// Thus: it leaks it's goroutine!
// (And never closes it's output)
func FanIn2Any(inp1, inp2 chan Any) chan Any {
	out := make(chan Any)
	go func() {
		for {
			select {
			case e := <-inp1:
				out <- e
			case e := <-inp2:
				out <- e
			}
		}
	}()
	return out
}

// ===========================================================================
