// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.

package pipe

import (
	"github.com/cheekybits/genny/generic"
)

// anyThing is the generic type flowing thru the pipe network.
type anyThing generic.Type

// ===========================================================================
// Beg of anyThingMake creators

// anyThingMakeChan returns a new open channel
// (simply a 'chan anyThing' that is).
//  Note: No 'anyThing-producer' is launched here yet! (as is in all the other functions).
//  This is useful to easily create corresponding variables such as:
/*
   var myanyThingPipelineStartsHere := anyThingMakeChan()
   // ... lot's of code to design and build Your favourite "myanyThingWorkflowPipeline"
   // ...
   // ... *before* You start pouring data into it, e.g. simply via:
   for drop := range water {
       myanyThingPipelineStartsHere <- drop
   }
   close(myanyThingPipelineStartsHere)
*/
//  Hint: especially helpful, if Your piping library operates on some hidden (non-exported) type
//  (or on a type imported from elsewhere - and You don't want/need or should(!) have to care.)
//
//  Note: as always (except for anyThingPipeBuffer) the channel is unbuffered.
//
func anyThingMakeChan() chan anyThing {
	return make(chan anyThing)
}

// End of anyThingMake creators
// ===========================================================================

// ===========================================================================
// Beg of anyThingChan producers

// anyThingChan returns a channel to receive
// all inputs
// before close.
func anyThingChan(inp ...anyThing) chan anyThing {
	out := make(chan anyThing)
	go func() {
		defer close(out)
		for i := range inp {
			out <- inp[i]
		}
	}()
	return out
}

// anyThingChanSlice returns a channel to receive
// all inputs
// before close.
func anyThingChanSlice(inp ...[]anyThing) chan anyThing {
	out := make(chan anyThing)
	go func() {
		defer close(out)
		for i := range inp {
			for j := range inp[i] {
				out <- inp[i][j]
			}
		}
	}()
	return out
}

// anyThingChanFuncNok returns a channel to receive
// all results of generator `gen`
// until `!ok`
// before close.
func anyThingChanFuncNok(gen func() (anyThing, bool)) chan anyThing {
	out := make(chan anyThing)
	go func() {
		defer close(out)
		for {
			res, ok := gen() // generate
			if !ok {
				return
			}
			out <- res
		}
	}()
	return out
}

// anyThingChanFuncErr returns a channel to receive
// all results of generator `gen`
// until `err != nil`
// before close.
func anyThingChanFuncErr(gen func() (anyThing, error)) chan anyThing {
	out := make(chan anyThing)
	go func() {
		defer close(out)
		for {
			res, err := gen() // generate
			if err != nil {
				return
			}
			out <- res
		}
	}()
	return out
}

// End of anyThingChan producers
// ===========================================================================

// ===========================================================================
// Beg of anyThingPipe functions

// anyThingPipeFunc returns a channel to receive
// every result of action `act` applied to `inp`
// before close.
//  Note: it 'could' be anyThingPipeMap for functional people,
//  but 'map' has a very different meaning in go lang.
func anyThingPipeFunc(inp chan anyThing, act func(a anyThing) anyThing) chan anyThing {
	out := make(chan anyThing)
	if act == nil { // Make `nil` value useful
		act = func(a anyThing) anyThing { return a }
	}
	go func() {
		defer close(out)
		for i := range inp {
			out <- act(i) // apply action
		}
	}()
	return out
}

// anyThingPipeBuffer returns a buffered channel with capacity `cap` to receive
// all `inp`
// before close.
func anyThingPipeBuffer(inp chan anyThing, cap int) chan anyThing {
	out := make(chan anyThing, cap)
	go func() {
		defer close(out)
		for i := range inp {
			out <- i
		}
	}()
	return out
}

// End of anyThingPipe functions
// ===========================================================================

// ===========================================================================
// Beg of anyThingTube closures around anyThingPipe

// anyThingTubeFunc returns a closure around PipeanyThingFunc (_, act).
func anyThingTubeFunc(act func(a anyThing) anyThing) (tube func(inp chan anyThing) (out chan anyThing)) {

	return func(inp chan anyThing) (out chan anyThing) {
		return anyThingPipeFunc(inp, act)
	}
}

// anyThingTubeBuffer returns a closure around PipeanyThingBuffer (_, cap).
func anyThingTubeBuffer(cap int) (tube func(inp chan anyThing) (out chan anyThing)) {

	return func(inp chan anyThing) (out chan anyThing) {
		return anyThingPipeBuffer(inp, cap)
	}
}

// End of anyThingTube closures around anyThingPipe
// ===========================================================================

// ===========================================================================
// Beg of anyThingDone terminators

// anyThingDone returns a channel to receive
// one signal before close after `inp` has been drained.
func anyThingDone(inp chan anyThing) chan struct{} {
	done := make(chan struct{})
	go func() {
		defer close(done)
		for i := range inp {
			_ = i // drain inp
		}
		done <- struct{}{}
	}()
	return done
}

// anyThingDoneSlice returns a channel to receive
// a slice with every anyThing received on `inp`
// before close.
//
//  Note: Unlike anyThingDone, anyThingDoneSlice sends the fully accumulated slice, not just an event, once upon close of inp.
func anyThingDoneSlice(inp chan anyThing) chan []anyThing {
	done := make(chan []anyThing)
	go func() {
		defer close(done)
		slice := []anyThing{}
		for i := range inp {
			slice = append(slice, i)
		}
		done <- slice
	}()
	return done
}

// anyThingDoneFunc returns a channel to receive
// one signal after `act` has been applied to every `inp`
// before close.
func anyThingDoneFunc(inp chan anyThing, act func(a anyThing)) chan struct{} {
	done := make(chan struct{})
	if act == nil {
		act = func(a anyThing) { return }
	}
	go func() {
		defer close(done)
		for i := range inp {
			act(i) // apply action
		}
		done <- struct{}{}
	}()
	return done
}

// End of anyThingDone terminators
// ===========================================================================

// ===========================================================================
// Beg of anyThingFini closures

// anyThingFini returns a closure around `anyThingDone(_)`.
func anyThingFini() func(inp chan anyThing) (done chan struct{}) {

	return func(inp chan anyThing) (done chan struct{}) {
		return anyThingDone(inp)
	}
}

// anyThingFiniSlice returns a closure around `anyThingDoneSlice(_)`.
func anyThingFiniSlice() func(inp chan anyThing) (done chan []anyThing) {

	return func(inp chan anyThing) (done chan []anyThing) {
		return anyThingDoneSlice(inp)
	}
}

// anyThingFiniFunc returns a closure around `anyThingDoneFunc(_, act)`.
func anyThingFiniFunc(act func(a anyThing)) func(inp chan anyThing) (done chan struct{}) {

	return func(inp chan anyThing) (done chan struct{}) {
		return anyThingDoneFunc(inp, act)
	}
}

// End of anyThingFini closures
// ===========================================================================

// ===========================================================================
// Beg of anyThingPair functions

// anyThingPair returns a pair of channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func anyThingPair(inp chan anyThing) (chan anyThing, chan anyThing) {
	out1 := make(chan anyThing)
	out2 := make(chan anyThing)
	go func() {
		defer close(out1)
		defer close(out2)
		for i := range inp {
			out1 <- i
			out2 <- i
		}
	}()
	return out1, out2
}

// End of anyThingPair functions
// ===========================================================================

// ===========================================================================
// Beg of anyThingFork functions

// anyThingFork returns two channels
// either of which is to receive
// every result of inp
// before close.
func anyThingFork(inp chan anyThing) (chan anyThing, chan anyThing) {
	out1 := make(chan anyThing)
	out2 := make(chan anyThing)
	go func() {
		defer close(out1)
		defer close(out2)
		for i := range inp {
			select { // send to whomever is ready to receive
			case out1 <- i:
			case out2 <- i:
			}
		}
	}()
	return out1, out2
}

// End of anyThingFork functions
// ===========================================================================

// ===========================================================================

// anyThingFanIn2 as seen in Go Concurrency Patterns
//
// Warning: For instruction and teaching only!
// Do not use in any serious project, as
// it hangs forever upon close of both inputs.
// Thus: it leaks it's goroutine!
// (And never closes it's output)
func anyThingFanIn2(inp1, inp2 chan anyThing) chan anyThing {
	out := make(chan anyThing)
	go func() {
		for {
			select {
			case e := <-inp1:
				out <- e
			case e := <-inp2:
				out <- e
			}
		}
	}()
	return out
}

// ===========================================================================
