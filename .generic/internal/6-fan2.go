// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright 2017 Andreas Pannewitz. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pipe

// ===========================================================================
// Beg of Fan2Thing easy fan-in's

// Fan2Thing returns a channel to receive
// everything from the given original channel `ori`
// as well as
// all inputs
// before close.
func Fan2Thing(ori <-chan Thing, inp ...Thing) (out <-chan Thing) {
	return FanIn2Thing(ori, ChanThing(inp...))
}

// Fan2ThingSlice returns a channel to receive
// everything from the given original channel `ori`
// as well as
// all inputs
// before close.
func Fan2ThingSlice(ori <-chan Thing, inp ...[]Thing) (out <-chan Thing) {
	return FanIn2Thing(ori, ChanThingSlice(inp...))
}

// Fan2ThingChan returns a channel to receive
// everything from the given original channel `ori`
// as well as
// from the the input channel `inp`
// before close.
// Note: Fan2ThingChan is nothing but FanIn2Thing
func Fan2ThingChan(ori <-chan Thing, inp <-chan Thing) (out <-chan Thing) {
	return FanIn2Thing(ori, inp)
}

// Fan2ThingFuncNok returns a channel to receive
// everything from the given original channel `ori`
// as well as
// all results of generator `gen`
// until `!ok`
// before close.
func Fan2ThingFuncNok(ori <-chan Thing, gen func() (Thing, bool)) (out <-chan Thing) {
	return FanIn2Thing(ori, ChanThingFuncNok(gen))
}

// Fan2ThingFuncErr returns a channel to receive
// everything from the given original channel `ori`
// as well as
// all results of generator `gen`
// until `err != nil`
// before close.
func Fan2ThingFuncErr(ori <-chan Thing, gen func() (Thing, error)) (out <-chan Thing) {
	return FanIn2Thing(ori, ChanThingFuncErr(gen))
}

// End of Fan2Thing easy fan-in's
